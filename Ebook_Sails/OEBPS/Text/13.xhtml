<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta content="Microsoft Word 12 (filtered)" name="Generator"/>
    <title>Style A ReadMe</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body class="calibre">
  <div class="section">
    <h1 class="tochead" id="heading_id_2">13    Ratings, Followers, and Search</h1>

    <p class="cosummaryhead">This chapter covers</p>

    <p class="cosummarybulletcxspfirst">·   Creating a rating system for tutorials</p>

    <p class="cosummarybulletcxspmiddle">·   Understanding follower/following associations</p>

    <p class="cosummarybulletcxspmiddle">·   Building search into Brushfire</p>

    <p class="cosummarybulletcxsplast">·   Incorporating pagination for tutorials and a sorting mechanism for videos</p>

    <p class="body">We are now well into our post-pivot journey that started in chapter 11. In chapter 12 we learned how to establish relationships between models using embedded values and Waterline associations. In this chapter we’ll build upon that knowledge to implement other requirements of Brushfire including adding videos, rating content, following users, search and more. We will end with a review of policies and restrictions in actions that manage access to various features. So let’s get started.</p>

    <h2 class="head" id="heading_id_3">13.1   Obtaining the example materials for this chapter</h2>

    <p class="body">If you have followed along in chapter 12 with an existing project, you can continue to use that project in this chapter. If, however, you want to start from this chapter and move forward, clone the following repo: <a class="pcalibre8 pcalibre5" href="https://github.com/sailsinaction/brushfire-ch12-end">https://github.com/sailsinaction/brushfire-ch12-end</a>. After cloning the repo, install the Node module dependencies via <span><code class="codeintext">npm install</code></span>. You’ll also want to add the local.js file we created in chapter 11. In Sublime, create a new file in <span><code class="codeintext">brushfire/config/local.js</code></span> and add the following code in listing 13.1.</p>

    <p class="codelistingcaption">Listing 13.1 Adding to the local.js file</p><code class="codebcxspfirst">module.exports.blueprints = {</code> <code class="codebcxspmiddle">  shortcuts: true,</code> <code class="codebcxspmiddle">  prefix: '/bp',</code> <code class="codebcxspmiddle">};</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">module.exports.connections = {</code> <code class="codebcxspmiddle">  myPostgresqlServer: {</code> <code class="codebcxspmiddle">    adapter: 'sails-postgresql',</code> <code class="codebcxspmiddle">    host: 'localhost',</code> <code class="codebcxspmiddle">    database: 'brushfire'</code> <code class="codebcxspmiddle">  }</code> <code class="codebcxspmiddle">};</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">module.exports.mailgun =  {</code> <code class="codebcxspmiddle">  apiKey: 'ADD YOUR MAILGUN API KEY HERE',</code> <code class="codebcxspmiddle">  domain: 'ADD YOUR MAILGUN DOMAIN HERE',</code> <code class="codebcxspmiddle">  baseUrl: 'http://localhost:1337'</code><code class="codebcxsplast">};</code>

    <h2 class="head" id="heading_id_4">13.2   Incorporating ratings</h2>

    <p class="body">Chad impressed upon us that early adopters of Brushfire wanted the ability to rate tutorials in order to differentiate between content. Users who are authenticated and are not the owner of a tutorial may rate a tutorial from the Tutorial details page. The average of the ratings is displayed on that page as well as other pages including search, browse, profile, and add video. We’ve already setup the association configuration between the <span><code class="codeintext">user</code></span>, <span><code class="codeintext">tutorial</code></span> and <span><code class="codeintext">rating</code></span> models similar to figure 13.1.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/13_01.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 13.1  The <span><code class="codeintext1">user</code></span> model has <span class="codeannotationcueballs">① </span>  a <span><code class="codeintext1">ratings</code></span> association attribute configured as a collection with the <span><code class="codeintext1">rating</code></span> model that uses via. The <span><code class="codeintext1">tutorial</code></span> model has <span class="codeannotationcueballs">② </span>  a <span><code class="codeintext1">ratings</code></span> association attribute configured as a collection with the <span><code class="codeintext1">rating</code></span> model that uses via. The <span><code class="codeintext1">rating</code></span> model has <span class="codeannotationcueballs">③ </span>  a  <span><code class="codeintext1">byUser</code></span> association attribute configured as a model with the <span><code class="codeintext1">user</code></span>. The <span><code class="codeintext1">rating</code></span> model also has <span class="codeannotationcueballs">④ </span>  a  <span><code class="codeintext1">byTutorial</code></span> association attribute configured as a model with the <span><code class="codeintext1">tutorial</code></span>.</p>

    <p class="body">A quick look at the <span class="italics">Tutorials detail page</span> in the Brushfire API reference reveals that the front end is expecting a <span><code class="codeintext">tutorial</code></span> dictionary that contains an <span><code class="codeintext">averageRating</code></span> and <span><code class="codeintext">myRating</code></span> attribute. We have chosen to not store these values as attributes in models and instead calculate each value using the <span><code class="codeintext">stars</code></span> attribute from the <span><code class="codeintext">rating</code></span> model.</p>

    <h3 class="head1" id="heading_id_5">13.2.1   Calculating averages</h3>

    <p class="body">We need to add the necessary code to calculate the average ratings for a found <span><code class="codeintext">tutorial</code></span>. In Sublime, open <span><code class="codeintext">brushfire/api/controllers/PageController.js</code></span> and add the following changes to the <span><code class="codeintext">tutorialDetail</code></span> action in listing 13.2.</p>

    <p class="codelistingcaption">Listing 13.2 Adding  <span><code class="codeintext1">populate and rating query to tutorialDetail</code></span> action </p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">  tutorialDetail: function(req, res) {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    Tutorial.findOne({</code> <code class="codebcxspmiddle">      id: req.param('id')</code> <code class="codebcxspmiddle">    })</code> <code class="codebcxspmiddle">    .populate('owner')</code> <code class="codebcxspmiddle">    .populate('videos')</code> <code class="codebcxspmiddle">    .populate('ratings')  <span class="codeannotationcueballs1">❶ </span>   </code> <code class="codebcxspmiddle">    .exec(function(err, foundTutorial){</code> <code class="codebcxspmiddle">      if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle">      if (!foundTutorial) return res.notFound();</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      Rating.findOne({  <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle">        byUser: req.session.userId</code> <code class="codebcxspmiddle">      }).exec(function(err, foundRating){</code> <code class="codebcxspmiddle">        if (err) return res.negotiate(err);</code><code class="codebcxsplast">...</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶ </span> Populating <span><code class="codeintext1">ratings</code></span> on the <span><code class="codeintext1">tutorial</code></span> model</p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❷ </span> Find the currently authenticated user’s rating, if any.</p>

    <p class="body">So we now have all of the ratings for the <span><code class="codeintext">tutorial</code></span> that we’ll use to calculate the <span><code class="codeintext">averageRating</code></span>. We also have a rating, if any, for the currently authenticated <span><code class="codeintext">user</code></span>. We need to do a check for whether the current tutorial being rated has been rated before by this authenticated user agent. If it has, we will pass it to the view as <span><code class="codeintext">myRating</code></span> through locals. In Sublime, continue adding the following code to the <span><code class="codeintext">tutorialDetail</code></span> action in listing 13.3.</p>

    <p class="codelistingcaption">Listing 13.3 Computing the <span><code class="codeintext1">averageRating</code></span> value in the <span><code class="codeintext1">tutorialDetail</code></span> action </p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">        if (foundRating.length === 0) {  <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">          foundTutorial.myRating = null;</code> <code class="codebcxspmiddle">        } else {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">          _.each(foundRating, function(rating){  <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">            if (foundTutorial.id === rating.byTutorial) { <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle">              foundTutorial.myRating = rating.stars;</code> <code class="codebcxspmiddle">              return;</code> <code class="codebcxspmiddle">            }</code> <code class="codebcxspmiddle">          });</code> <code class="codebcxspmiddle">        }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">        if (foundTutorial.ratings.length === 0) {  <span class="codeannotationcueballs1">❹ </span></code> <code class="codebcxspmiddle">          foundTutorial.averageRating = null;</code> <code class="codebcxspmiddle">        } else {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">          var sumfoundTutorialRatings = 0;</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">          _.each(foundTutorial.ratings, function(rating){  <span class="codeannotationcueballs1">❺ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">            sumfoundTutorialRatings = sumfoundTutorialRatings + rating.stars;</code> <code class="codebcxspmiddle">          });</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">          foundTutorial.averageRating = sumfoundTutorialRatings / foundTutorial.ratings.length;  <span class="codeannotationcueballs1">❻ </span></code> <code class="codebcxspmiddle">        }</code><code class="codebcxsplast">...</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶ </span> If no ratings for currently authenticated user agent then assign <span><code class="codeintext1">myRating</code></span> to <span><code class="codeintext1">null</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❷ </span>  Iterate through each rating for a match with current <span><code class="codeintext1">tutorial.</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❸ </span>  If there’s a match, assign it to <span><code class="codeintext1">myRating.</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❹ </span>  If there are no ratings for the <span><code class="codeintext1">tutorial, then</code></span> assign <span><code class="codeintext1">foundTutorial.averageRating</code></span> to <span><code class="codeintext1">null</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❺  </span> Otherwise calculate the average of all ratings.</p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❻   </span>Assign the value of the average to <span><code class="codeintext1">foundTutorial.averageRating.</code></span></p>

    <p class="body">The bootstrap provides us with two test ratings: one from <span><code class="codeintext">franksinatra</code></span>, (Frank was a bit stingy giving a rating of 3 <span><code class="codeintext">stars)</code></span>, and one from <span><code class="codeintext">nikolatesla</code></span>, which gave a rating of 3 <span><code class="codeintext">stars</code></span> to the Crockford tutorial. Restart Sails using <span><code class="codeintext">sails lift</code></span>, login as <span><code class="codeintext">nikolatesla</code></span> and navigate your browser to <i>localhost:1337/tutorials/1</i>.  You should see something similar to figure 13.2.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/13_02.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 13.2  The <span class="italics1">Tutorials detail page</span> now displays the correct <span class="codeannotationcueballs">① </span>  average rating and <span class="codeannotationcueballs">② </span>  a rating for the currently authenticated user agent, if any. In this case the <span><code class="codeintext1">nikolatesla</code></span> test <span><code class="codeintext1">user</code></span> has provided a rating of 3 <span><code class="codeintext1">stars</code></span>.</p>

    <p class="body">When the user rates the tutorial by clicking on the stars next to <span><code class="codeintext">myRating</code></span>, or clicks the <span class="italics">change</span> button if a rating has already been given, the <span class="italics">Rate tutorial</span> request is triggered. Let’s implement that endpoint in the next section.</p>

    <h3 class="head1" id="heading_id_6">13.2.2   Adding a new rating</h3>

    <p class="body">Let’s implement the <span class="italics">Rate tutorial</span> request as defined in the API reference as: <span class="italics">Create or update rating for a tutorial using the session of the user-agent and respond with the average rating for the tutorial.</span> The Rate tutorial endpoint has two incoming parameters – the <span><code class="codeintext">tutorialid</code></span> and the number of <span><code class="codeintext">stars</code></span> provided for the tutorial rating. We will use both parameters to fulfill the requirements of the endpoint. In Sublime, open <span><code class="codeintext">brushfire/api/controllers/TutorialController.js</code></span> and add the following code in listing 13.4 to the <span><code class="codeintext">rateTutorial</code></span> action.</p>

    <p class="body"> </p>

    <p class="codelistingcaption">Listing 13.4 Implementing the <span><code class="codeintext1">rateTutorial</code></span> endpoint  -- the initial queries </p><code class="codebcxspfirst">  rateTutorial: function(req, res) {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    User.findOne({     <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">      id: req.session.userId</code> <code class="codebcxspmiddle">    })</code> <code class="codebcxspmiddle">    .exec(function(err, currentUser){</code> <code class="codebcxspmiddle">      if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle">      if (!currentUser) return res.notFound();</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      Tutorial.findOne({      <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle">        id: +req.param('id')</code> <code class="codebcxspmiddle">      })</code> <code class="codebcxspmiddle">      .populate('owner')</code> <code class="codebcxspmiddle">      .exec(function(err, foundTutorial){</code> <code class="codebcxspmiddle">        if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle">        if (!foundTutorial) return res.notFound();</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">        if (currentUser.id === foundTutorial.owner.id) {   <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle">          return res.forbidden();</code> <code class="codebcxspmiddle">        }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">       Rating.findOne({     <span class="codeannotationcueballs1">❹ </span></code> <code class="codebcxspmiddle">          byUser: currentUser.id,</code> <code class="codebcxspmiddle">          byTutorial: foundTutorial.id</code> <code class="codebcxspmiddle">        }).exec(function(err, foundRating){</code><code class="codebcxsplast">          if (err) return res.negotiate(err);</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶   </span>Find the currently authenticated  user agent.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❷   </span>Find the <span><code class="codeintext1">tutorial</code></span> being rated.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❸   </span>Prevent a rating if the currently authenticated user agent created the tutorial.</p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❹ </span>  Find a <span><code class="codeintext1">rating,</code></span> if any, of the currently authenticated user agent.</p>

    <p class="body">We’ll first query for the currently logged in user agent, the <span><code class="codeintext">tutorial</code></span> being rated, and any <span><code class="codeintext">rating</code></span> by the currently logged in user agent for this <span><code class="codeintext">tutorial</code></span>. Notice that we are not using the <span><code class="codeintext">Rating.find()</code></span> model method and then iterating through the array of dictionaries to find a matching rating. Instead, we use an IN query that specifies multiple criteria in query. This eliminates the need for iterating through returned ratings results from query. If a rating exists we’ll update the existing rating in Sublime with the following code in listing 13.5.</p>

    <p class="codelistingcaption">Listing 13.5 Implementing the <span class="italics1">rateTutorial</span> endpoint  -- updating an existing rating </p><code class="codebcxspfirst">          ...</code> <code class="codebcxspmiddle">     if (foundRating) {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">       Rating.update({      <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">              id: foundRating.id</code> <code class="codebcxspmiddle">            },{</code> <code class="codebcxspmiddle">              stars: req.param('stars')</code> <code class="codebcxspmiddle">            }).exec(function(err, updatedRating){</code> <code class="codebcxspmiddle">              if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle">              if (!updatedRating) return res.notFound();</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">     Tutorial.findOne({     <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle">                id: req.param('id')</code> <code class="codebcxspmiddle">              })</code> <code class="codebcxspmiddle">              .populate('ratings')</code> <code class="codebcxspmiddle">              .exec(function(err, foundTutorialAfterUpdate){</code> <code class="codebcxspmiddle">                if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle">                if (!foundTutorialAfterUpdate) return res.notFound();</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">                var sumTutorialRatings = 0;</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">                _.each(foundTutorialAfterUpdate.ratings, function(rating){ <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">                  sumTutorialRatings = sumTutorialRatings + rating.stars;</code> <code class="codebcxspmiddle">                });    <span class="codeannotationcueballs1">❹ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">                foundTutorialAfterUpdate.averageRating = Math.floor(sumTutorialRatings / foundTutorialAfterUpdate.ratings.length); <span class="codeannotationcueballs1">❺ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">                return res.json({</code> <code class="codebcxspmiddle">                  averageRating: foundTutorialAfterUpdate.averageRating  <span class="codeannotationcueballs1">❻ </span></code> <code class="codebcxspmiddle">                });</code> <code class="codebcxspmiddle">              });</code> <code class="codebcxspmiddle">            });</code><code class="codebcxsplast">            ...</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶ </span> Update the existing rating with the new rating.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❷ </span>  Query the current tutorial for all ratings using .populate().</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❸ </span> Iterate through each rating.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❹ </span> Add up all the ratings.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❺ </span> Calculate the average.</p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❻ </span> Respond with the average as json.</p>

    <p class="body">First we will update the individual number of <span><code class="codeintext">stars</code></span> in the rating model. Because the average number of stars is calculated and not stored, we need to first get all the ratings for the tutorial and then calculate the average by iterating over them. Next, if the no rating exists we’ll create a new one in Sublime with the following code in listing 13.6.</p>

    <p class="codelistingcaption">Listing 13.6 Implementing the <span class="italics1">rateTutorial</span> endpoint  -- creating a new rating </p><code class="codebcxspfirst">          ...</code> <code class="codebcxspmiddle">          } else {</code> <code class="codebcxspmiddle">            Rating.create({     <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">              stars: req.param('stars'),</code> <code class="codebcxspmiddle">              byUser: currentUser.id,</code> <code class="codebcxspmiddle">              byTutorial: foundTutorial.id</code> <code class="codebcxspmiddle">            }).exec(function(err, createdRating){</code> <code class="codebcxspmiddle">              if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle">              if (!createdRating) return res.notFound();</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">              Tutorial.findOne({  <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle">                id: req.param('id')</code> <code class="codebcxspmiddle">              })</code> <code class="codebcxspmiddle">              .populate('ratings')</code> <code class="codebcxspmiddle">              .exec(function(err, foundTutorialAfterUpdate){</code> <code class="codebcxspmiddle">                if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle">                if (!foundTutorialAfterUpdate) return res.notFound();</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">                var sumTutorialRatings = 0;</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">                _.each(foundTutorialAfterUpdate.ratings, function(rating){  <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">                  sumTutorialRatings = sumTutorialRatings + rating.stars;</code> <code class="codebcxspmiddle">                });   <span class="codeannotationcueballs1">❹ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">                foundTutorial.averageRating = sumTutorialRatings / foundTutorialAfterUpdate.ratings.length;   <span class="codeannotationcueballs1">❺ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">                return res.json({   <span class="codeannotationcueballs1">❻ </span></code> <code class="codebcxspmiddle">                  averageRating: foundTutorial.averageRating</code> <code class="codebcxspmiddle">                });</code><code class="codebcxsplast">                ...</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶ </span>  Create the new rating.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❷ </span>  Query for the current <span><code class="codeintext1">tutorial</code></span> populating the <span><code class="codeintext1">ratings</code></span> attribute.e</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❸   </span>Iterate through each rating.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❹   </span>Add up all the ratings.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❺   </span>Calculate the average.</p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❻   </span>Respond with the average as json.</p>

    <p class="body">We have now repeated the calculation of the average rating code in three different places. Let’s refactor the averaging code to a service that can be executed from multiple places. In Sublime, create a new file at <span><code class="codeintext">brushfire/api/services/MathService.js</code></span> and add the following code in listing 13.7.</p>

    <p class="codelistingcaption">Listing 13.7 The MathService</p><code class="codebcxspfirst">module.exports = {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">  calculateAverage: function (options) {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    var sumTutorialRatings = 0;</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    _.each(options.ratings, function(rating){</code> <code class="codebcxspmiddle">      sumTutorialRatings = sumTutorialRatings + rating.stars;</code> <code class="codebcxspmiddle">    });</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    var averageRating = sumTutorialRatings / options.ratings.length;</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    return averageRating;</code> <code class="codebcxspmiddle">  }</code><code class="codebcxsplast">};</code>

    <p class="body">Refactoring the <span><code class="codeintext">rateTutorial</code></span> action code to execute the service is simple. In Sublime, open <span><code class="codeintext">brushfire/api/controllers/TutorialController.js</code></span> and replace the code that does the averaging (in two places) with the service in the <span><code class="codeintext">rateTutorial</code></span> action similar to listing 13.8.</p>

    <p class="codelistingcaption">Listing 13.8 The refactored <span><code class="codeintext1">rateTutorial</code></span> action</p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">return res.json({</code> <code class="codebcxspmiddle">  averageRating: MathService.calculateAverage({ratings: foundTutorialAfterUpdate.ratings})</code> <code class="codebcxspmiddle">});</code><code class="codebcxsplast">...</code>

    <p class="body">Let’s also update the <span><code class="codeintext">tutorialDetail</code></span> action of the <span><code class="codeintext">Page</code></span> controller to take advantage of the service. In Sublime open <span><code class="codeintext">brushfire/api/controllers/PageController.js</code></span> and exchange the following service for the existing averaging code similar to listing 13.9.</p>

    <p class="codelistingcaption">Listing 13.9 The refactored <span><code class="codeintext1">tutorialDetail</code></span> action</p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">if (foundTutorial.ratings.length === 0) {</code> <code class="codebcxspmiddle">  foundTutorial.averageRating = null;</code> <code class="codebcxspmiddle">} else {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">   foundTutorial.averageRating = MathService.calculateAverage({ratings: foundTutorial.ratings});</code> <code class="codebcxspmiddle">}</code><code class="codebcxsplast">...</code>

    <h2 class="head" id="heading_id_7">13.3   Implementing videos</h2>

    <p class="body">Before we can move on to building features like followers and search, we need to finish the last set of remaining tasks left over from the pivot.  Now that we’re masters of associations, this will be a breeze!</p>

    <p class="body">We still need to implement the video functionality to Brushfire. Recall that a tutorial can contain YouTube video links. Figure 13.3 depicts the association between the <span><code class="codeintext">video</code></span> and <span><code class="codeintext">tutorial</code></span> model associations that are similar to the configuration we setup between the <span><code class="codeintext">user</code></span> and <span><code class="codeintext">tutorial</code></span> models.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/13_03.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 13.3  The <span><code class="codeintext1">tutorial</code></span> model has <span class="codeannotationcueballs">① </span>  a <span><code class="codeintext1">videos</code></span> association attribute configured as a collection with the <span><code class="codeintext1">video</code></span> model that uses via. The <span><code class="codeintext1">video</code></span> model has <span class="codeannotationcueballs">② </span>  a <span><code class="codeintext1">tutorialAssoc</code></span> association attribute configured as a model with the <span><code class="codeintext1">tutorial</code></span> model.</p>

    <p class="body">A <span><code class="codeintext">tutorial</code></span> record can have multiple videos and a <span><code class="codeintext">video</code></span> record can have one <span><code class="codeintext">tutorial</code></span>.</p>

    <h3 class="head1" id="heading_id_8">13.3.1   The “Create video” form</h3>

    <p class="body">The <span class="italics">Create video page</span> is currently using a simulated dictionary we added when we cloned the project in chapter 11. This simulated dictionary also contains the <span><code class="codeintext">title, description, owner, id, created, totalTime</code></span> and <span><code class="codeintext">stars</code></span> attributes in the format the front end expects. In this section we will replace the simulated dictionary with a combination of queries and transformations to achieve the simulated results with real data. Let’s take a look at the wireframe for the attributes we need to retrieve and format for the <span class="italics">Create video page</span> in figure 13.4.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/13_04.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 13.4 The <span class="italics1">Create video</span> page displays attributes from the <span><code class="codeintext1">user</code></span>, <span><code class="codeintext1">tutorial</code></span>, and <span><code class="codeintext1">rating</code></span> models.</p>

    <p class="body">Similar to the <span class="italics">Tutorials detail page</span> we will need attributes from all four models. We’ll transform, calculate and format all of the values for dictionary properties similar to figure 13.5.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/13_05.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 13.5 The front end expects the following attribute formats in the <span class="italics1">Create video page</span>.</p>

    <p class="body">To get started, open <span><code class="codeintext">brushfire/api/controllers/PageController.js</code></span> in Sublime, and add the following code to the <span><code class="codeintext">newVideo</code></span> action in listing 13.10.</p>

    <p class="codelistingcaption">Listing 13.10 The initial queries of the <span><code class="codeintext1">newVideo</code></span> action</p><code class="codebcxspfirst">  ...</code> <code class="codebcxspmiddle">  newVideo: function(req, res) {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    Tutorial.findOne({</code> <code class="codebcxspmiddle">      id: +req.param('id')</code> <code class="codebcxspmiddle">    })</code> <code class="codebcxspmiddle">    .populate('owner')     <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">    .populate('ratings')   <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">    .populate('videos')    <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">    .exec(function (err, foundTutorial){</code> <code class="codebcxspmiddle">      if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle">      if (!foundTutorial) return res.notFound();</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      User.findOne({</code> <code class="codebcxspmiddle">        id: req.session.userId</code> <code class="codebcxspmiddle">      }).exec(function (err, foundUser) {</code> <code class="codebcxspmiddle">        if (err) {</code> <code class="codebcxspmiddle">          return res.negotiate(err);</code> <code class="codebcxspmiddle">        }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">        if (!foundUser) {</code> <code class="codebcxspmiddle">          sails.log.verbose('Session refers to a user who no longer exists.');</code> <code class="codebcxspmiddle">          return res.redirect('/');</code><code class="codebcxsplast">        }</code>

    <p class="codeannotation pcalibre7"><span class="codeannotationcueballs2">❶ </span> Populate <span><code class="codeintext1">owner</code></span>, <span><code class="codeintext1">ratings</code></span> and <span><code class="codeintext1">videos</code></span> for the <span><code class="codeintext1">tutorial.</code></span></p>

    <p class="body">Next, we’ll use our previously created <span><code class="codeintext">MathService</code></span> to format the <span><code class="codeintext">createdAt</code></span> date and calculate the average rating. In Sublime, add the following code similar to listing 13.11.</p>

    <p class="codelistingcaption">Listing 13.11 Formatting the <span><code class="codeintext1">createdAt</code></span> date and calculating the average rating</p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">        if (foundUser.username !== foundTutorial.owner.username) {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">          return res.redirect('/tutorials/'+foundTutorial.id);</code> <code class="codebcxspmiddle">        }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">        foundTutorial.created = DatetimeService.getTimeAgo({date: foundTutorial.createdAt});</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">        if (foundTutorial.ratings.length === 0) {</code> <code class="codebcxspmiddle">          foundTutorial.averageRating = null;</code> <code class="codebcxspmiddle">        } else {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">          foundTutorial.stars = MathService.calculateAverage({ratings: foundTutorial.ratings});  <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">        }</code><code class="codebcxsplast">        ...</code>

    <p class="codeannotation pcalibre7"><span class="codeannotationcueballs2">❶ </span>  Notice that we are using a <span><code class="codeintext1">stars</code></span> attribute and not <span><code class="codeintext1">averageRating</code></span>.</p>

    <p class="body">Similar to the way we are calculating the average rating, we will calculate the <span><code class="codeintext">totalTime</code></span> attribute in the action. The Brushfire API reference indicates that the <span><code class="codeintext">totalTime</code></span> attribute is the total length of all videos. There are a variety of ways we could store and calculate this value. We decided to store the total <span><code class="codeintext">lengthInSeconds</code></span> of each video as an attribute of the <span><code class="codeintext">video</code></span> model. We will then use that attribute to calculate and later format the various video length formatting requirements of the front end. Because we need to do the calculation and formatting in more than three Brushfire locations, we already added the method <span><code class="codeintext">getHoursMinutesSeconds</code></span> to the existing <span><code class="codeintext">DateTimeService</code></span>. Let’s take a look by opening <span><code class="codeintext">brushfire/api/services/DateTimeService.js</code></span> in Sublime, which should yield code similar to listing 13.12.</p>

    <p class="codelistingcaption">Listing 13.12  The <span class="italics1">getHoursMinutesSeconds</span> method of the <span class="italics1">DateTimeService</span></p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">getHoursMinutesSeconds: function(options) {      <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    var hours = Math.floor(options.totalSeconds/ 60 / 60);     <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle">    var minutes = Math.floor(options.totalSeconds / 60 % 60);  <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle">    var seconds = options.totalSeconds % 60;     <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    var hoursMinutesSeconds = hours + 'h ' + minutes + 'm ' + seconds + 's ';  <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    return {</code> <code class="codebcxspmiddle">      hoursMinutesSeconds: hoursMinutesSeconds,  <span class="codeannotationcueballs1">❹ </span></code> <code class="codebcxspmiddle">      hours: hours,       <span class="codeannotationcueballs1">❺ </span></code> <code class="codebcxspmiddle">      minutes: minutes,   <span class="codeannotationcueballs1">❺ </span></code> <code class="codebcxspmiddle">      seconds: seconds    <span class="codeannotationcueballs1">❺ </span></code> <code class="codebcxspmiddle">    };</code> <code class="codebcxspmiddle">  }</code><code class="codebcxsplast">};</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶   </span>Pass <span><code class="codeintext1">totalSeconds</code></span> via an options dictionary.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❷   </span>Transforms <span><code class="codeintext1">totalSeconds</code></span> into hours, minutes, and seconds</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❸   </span>Formats <span><code class="codeintext1">totalSeconds</code></span> into <span class="italics1">1h 2m 3s</span>format.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❹   </span>Returns formatted <span><code class="codeintext1">hoursMinutesSeconds</code></span></p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❺   </span>Returns hours, minutes, seconds</p>

    <p class="body">Now that we have the service, let’s use it to complete the <span><code class="codeintext">newVideo</code></span> action. In Sublime, open <span><code class="codeintext">brushfire/api/controllers/PageController.js</code></span> and add the following code in listing 13.13.</p>

    <p class="codelistingcaption">Listing 13.13 Using <span><code class="codeintext1">getHoursMinutesSeconds</code></span> to calculate <span><code class="codeintext1">totalTime</code></span></p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">var totalSeconds = 0;</code> <code class="codebcxspmiddle">        _.each(foundTutorial.videos, function(video){          <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">          totalSeconds = totalSeconds + video.lengthInSeconds; <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">          foundTutorial.totalTime = DatetimeService.getHoursMinutesSeconds({totalSeconds: totalSeconds}).hoursMinutesSeconds; <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle">        });</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">        return res.view('tutorials-detail-video-new', {  <span class="codeannotationcueballs1">❹ </span></code> <code class="codebcxspmiddle">          me: {</code> <code class="codebcxspmiddle">            username: user.username,</code> <code class="codebcxspmiddle">            gravatarURL: user.gravatarURL,</code> <code class="codebcxspmiddle">            admin: user.admin</code> <code class="codebcxspmiddle">          },</code> <code class="codebcxspmiddle">          tutorial: {</code> <code class="codebcxspmiddle">            id: foundTutorial.id,</code> <code class="codebcxspmiddle">            title: foundTutorial.title,</code> <code class="codebcxspmiddle">            description: foundTutorial.description,</code> <code class="codebcxspmiddle">            owner: foundTutorial.owner.username,</code> <code class="codebcxspmiddle">            created: foundTutorial.created,</code> <code class="codebcxspmiddle">            totalTime: foundTutorial.totalTime,</code> <code class="codebcxspmiddle">            stars: foundTutorial.stars</code> <code class="codebcxspmiddle">          }</code> <code class="codebcxspmiddle">        });</code> <code class="codebcxspmiddle">      });</code> <code class="codebcxspmiddle">    });</code><code class="codebcxsplast">  },</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶ </span> Iterate through each <span><code class="codeintext1">video</code></span> in the <span><code class="codeintext1">tutorial.</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❷ </span> Keep a running total of the <span><code class="codeintext1">lengthInSeconds.</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❸ </span> Send the <span><code class="codeintext1">totalSeconds</code></span> dictionary as an argument to the service to get the <span><code class="codeintext1">hoursMinutesSeconds</code></span> property.</p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❹ </span> Render the view with the appropriate locals.</p>

    <p class="body">We’ll also need that same bit of code in the tutorial detail page. In Sublime open <span><code class="codeintext">brushfire/api/controllers/PageController.js</code></span> and add the following code to the <span><code class="codeintext">tutorialDetail</code></span> action similar to listing 13.14.</p>

    <p class="codelistingcaption">Listing 13.14 Calculating the tutorial length in the <span><code class="codeintext1">tutorialDetail</code></span> action</p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">          foundTutorial.averageRating = MathService.calculateAverage({ratings: foundTutorial.ratings})</code> <code class="codebcxspmiddle">          }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">          var totalSeconds = 0;</code> <code class="codebcxspmiddle">          _.each(foundTutorial.videos, function(video){</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">            totalSeconds = totalSeconds + video.lengthInSeconds;</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">            video.totalTime = DatetimeService.getHoursMinutesSeconds({totalSeconds: video.lengthInSeconds}).hoursMinutesSeconds;</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">            foundTutorial.totalTime = DatetimeService.getHoursMinutesSeconds({totalSeconds: totalSeconds}).hoursMinutesSeconds;</code> <code class="codebcxspmiddle">          });</code><code class="codebcxsplast">...</code>

    <p class="body">You might be wondering how the total was calculated when we haven’t created any videos yet?  The answer is that the bootstrap created tutorials and videos including <span><code class="codeintext">lengthInSeconds</code></span>, as well as a <span><code class="codeintext">rating</code></span>. Next, let’s move to actually adding a video with its attributes.</p>

    <h3 class="head1" id="heading_id_9">13.3.2   Review: adding a record to a collection association</h3>

    <p class="body">Adding a video to the model is easy. First look at the Create video page attributes in figure 13.6.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/13_06.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 13.6 The <span class="italics1">Create video page</span> has some properties we’ll store in the <span><code class="codeintext1">video</code></span> model like <span><code class="codeintext1">title</code></span> and <span><code class="codeintext1">src</code></span> and some properties that we’ll use to calculate the <span><code class="codeintext1">lengthInSeconds</code></span> on the back-end like <span><code class="codeintext1">hours</code></span>, <span><code class="codeintext1">minutes</code></span> and <span><code class="codeintext1">seconds</code></span>.</p>

    <p class="body">In Sublime, open <span><code class="codeintext">brushfire/api/controllers/TutorialController.js</code></span> and add the following code to the <span><code class="codeintext">addVideo</code></span> action in listing 13.15.</p>

    <p class="codelistingcaption">Listing 13.15 Creating a video record</p><code class="codebcxspfirst">  ...</code> <code class="codebcxspmiddle">  addVideo: function(req, res) {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    if (!_.isNumber(req.param('hours')) || !_.isNumber(req.param('minutes')) || !_.isNumber(req.param('seconds'))) {</code> <code class="codebcxspmiddle">      return res.badRequest();   <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">    }</code> <code class="codebcxspmiddle">    if (!_.isString(req.param('src')) || !_.isString(req.param('title'))) {</code> <code class="codebcxspmiddle">      return res.badRequest();   <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">    }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    Tutorial.findOne({           <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle">      id: +req.param('tutorialId')</code> <code class="codebcxspmiddle">    })</code> <code class="codebcxspmiddle">    .populate('owner')</code> <code class="codebcxspmiddle">.exec(function(err, foundTutorial){</code> <code class="codebcxspmiddle">      if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle">      if (!foundTutorial) return res.notFound();</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      if (foundTutorial.owner.id !== req.session.userId) {  <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle">        return res.forbidden();</code> <code class="codebcxspmiddle">      }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      Video.create({  <span class="codeannotationcueballs1">❹ </span></code> <code class="codebcxspmiddle">        tutorialAssoc: foundTutorial.id,  <span class="codeannotationcueballs1">❺ </span></code> <code class="codebcxspmiddle">        title: req.param('title'),</code> <code class="codebcxspmiddle">        src: req.param('src'),</code> <code class="codebcxspmiddle">        lengthInSeconds: req.param('hours') * 60 * 60 + req.param('minutes') * 60 + req.param('seconds')  <span class="codeannotationcueballs1">❺ </span></code> <code class="codebcxspmiddle">      }).exec(function (err, createdVideo) {</code> <code class="codebcxspmiddle">        if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">        return res.ok();</code> <code class="codebcxspmiddle">      });</code> <code class="codebcxspmiddle">    });</code><code class="codebcxsplast">  },</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶   </span>First validate incoming parameters as a backup to the front-end validation.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❷   </span>Find this <span><code class="codeintext1">tutorial</code></span> that will contain the <span><code class="codeintext1">video.</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❸   </span>Check if the current user is the <span><code class="codeintext1">owner</code></span> of the <span><code class="codeintext1">tutorial.</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❹   </span>Create the <span><code class="codeintext1">video</code></span> using the incoming parameters.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❺   </span>Associate the <span><code class="codeintext1">video</code></span> to the <span><code class="codeintext1">tutorial</code></span> by setting the <span><code class="codeintext1">tutorialAssoc</code></span> attribute to the <span><code class="codeintext1">tutorialid</code></span>.</p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❻ </span>  Convert <span><code class="codeintext1">hours</code></span>, <span><code class="codeintext1">minutes</code></span>, and <span><code class="codeintext1">seconds</code></span> into <span><code class="codeintext1">lengthInSeconds.</code></span></p>

    <p class="body">Because we’re using a <span><code class="codeintext">collection</code></span> association with the <span><code class="codeintext">via</code></span> property, we only need to update the reference to the record in one place. The easiest choice is to set the <span><code class="codeintext">tutorialAssoc</code></span> attribute of the video model to the current <span><code class="codeintext">tutorialid</code></span><span class="italics">.</span> We could have used the <span class="italics">.</span><span><code class="codeintext">add</code></span> method within the <span><code class="codeintext">tutorial</code></span> model.  However, this would have required anadded step and execute <span><code class="codeintext">.save()</code></span>. Also, notice that we’re converting hours, minutes, and seconds of the <span><code class="codeintext">video</code></span> into total seconds and then assigning it to <span><code class="codeintext">lengthInSeconds</code></span>.</p>

    <h3 class="head1" id="heading_id_10">13.3.3   Editing video details</h3>

    <p class="body">Updating a video uses very similar code to creating a video. We suggest you review the requirements in the Brushfire API reference under <span class="italics">Edit video page</span> and <span class="italics">Edit video metadata</span>. To implement the Edit video page endpoint open <span><code class="codeintext">brushfire/api/controllers/PageController.js</code></span> in Sublime and add the following code to the <span><code class="codeintext">editVideo</code></span> action from this gist: <a class="pcalibre8 pcalibre5" href="https://gist.github.com/sailsinaction/60ad71a410a2e9478af7c0a2e0f34697">https://gist.github.com/sailsinaction/60ad71a410a2e9478af7c0a2e0f34697</a>. To implement the <span class="italics">Edit video metadata</span> endpoint open <span><code class="codeintext">brushfire/api/controllers/TutorialController.js</code></span> in Sublime and add the following code to the <span><code class="codeintext">updateVideo</code></span> action from the following gist: <a class="pcalibre8 pcalibre5" href="https://gist.github.com/sailsinaction/8ce2a156e4d43f33bc751a59d4261f51">https://gist.github.com/sailsinaction/8ce2a156e4d43f33bc751a59d4261f51</a>.</p>

    <h3 class="head1" id="heading_id_11">13.3.4   Managing the sort order of videos using an embedded array</h3>

    <p class="body">In chapter 12 we pointed out that although issues exist when embedding records to create relationships between models, there are situations where embedding a value or groups of values would be advantageous in a model. In fact they work as long as the embedded value doesn’t need to be queried outside the context of the model where it’s embedded. Managing the sort order of videos in tutorial records is a good example of using an embedded array in a model. First, we added a <span><code class="codeintext">videoOrder</code></span> attribute as JSON to the video model similar to listing 13.16.</p>

    <p class="codelistingcaption">Listing 13.16 Configuring the <span class="italics1">videoOrder</span> attribute in the model</p><code class="codebcxspfirst">     ...</code> <code class="codebcxspmiddle">      videoOrder: {</code> <code class="codebcxspmiddle">        type: 'json'</code> <code class="codebcxspmiddle">      },</code><code class="codebcxsplast">      ...</code>

    <p class="body">We want to be able to add videos to a tutorial and then reorder the videos up and down. The <span><code class="codeintext">createTutorial</code></span>, <span><code class="codeintext">addVideo</code></span>, <span><code class="codeintext">tutorialDetail</code></span>, <span><code class="codeintext">reorderVideoUp</code></span>, and <span><code class="codeintext">reorderVideoDown</code></span> endpoints a reaffected by managing the <span><code class="codeintext">video</code></span> sort order. We’ll use the embedded array to cache the sort order of video <span class="italics">ids</span>. The sorting process will include the following tasks in table 13.1.</p>

    <p class="tablecaption pcalibre7">Table 13.1 Tasks related to the video order</p>

    <table cellpadding="0" cellspacing="0" class="msonormaltable" width="100%">
      <tr class="calibre3">
        <td char="24%" class="sgc232" valign="top">
          <div class="sgc6">
            <p class="tablehead">Action</p>
          </div>
        </td>

        <td char="75%" class="sgc233" colspan="2" valign="top">
          <div class="sgc6">
            <p class="tablehead">Task</p>
          </div>
        </td>
      </tr>

      <tr class="calibre3">
        <td char="28%" class="sgc234" colspan="2" valign="top">
          <p class="tablebody2cxspfirst"><span><code class="codeintext">createTutorial</code></span></p>
        </td>

        <td char="71%" class="sgc235" valign="top">
          <p class="tablebody2cxsplast">…when a <span><code class="codeintext">tutorial</code></span> is created, set the <span><code class="codeintext">videoOrder</code></span> property to an empty array</p>
        </td>
      </tr>

      <tr class="calibre3">
        <td char="28%" class="sgc234" colspan="2" valign="top">
          <p class="tablebody2cxspfirst"><span><code class="codeintext">addVideo</code></span></p>
        </td>

        <td char="71%" class="sgc235" valign="top">
          <p class="tablebody2cxsplast">…when a <span><code class="codeintext">video</code></span> is created, push the <span><code class="codeintext">videoid</code></span> to the <span><code class="codeintext">videoOrder</code></span> embedded array.</p>
        </td>
      </tr>

      <tr class="calibre3">
        <td char="28%" class="sgc234" colspan="2" valign="top">
          <p class="tablebody2cxspfirst"><span><code class="codeintext">tutorialDetail</code></span></p>
        </td>

        <td char="71%" class="sgc235" valign="top">
          <p class="tablebody2cxsplast">…when the <span><code class="codeintext">tutorial</code></span> detail page is rendered…use the <span><code class="codeintext">videoOrder</code></span> embedded array to sort the videos.</p>
        </td>
      </tr>

      <tr class="calibre3">
        <td char="28%" class="sgc234" colspan="2" valign="top">
          <p class="tablebody2cxspfirst"><span><code class="codeintext">reorderVideoUp</code></span></p>
        </td>

        <td char="71%" class="sgc235" valign="top">
          <p class="tablebody2cxsplast">…when the up arrow is clicked, move the <span><code class="codeintext">videoid</code></span> up one element in the array.</p>
        </td>
      </tr>

      <tr class="calibre3">
        <td char="28%" class="pcalibre7 sgc236" colspan="2" valign="top">
          <p class="tablebody2cxspfirst"><span><code class="codeintext">reorderVideoDown</code></span></p>
        </td>

        <td char="71%" class="sgc237" valign="top">
          <p class="tablebody2cxsplast">…when the down arrow is clicked, move the video id down one element in the array.</p>
        </td>
      </tr>

      <tr class="calibre3" height="0">
        <td char="184" class="sgc76 pcalibre7"/>

        <td char="27" class="sgc76 pcalibre7"/>

        <td char="536" class="sgc76 pcalibre7"/>
      </tr>
    </table>

    <p class="body">Let’s implement each one of these tasks. First is the <span><code class="codeintext">createTutorial</code></span> action of the <span><code class="codeintext">Tutorial</code></span> controller. In Sublime, open <span><code class="codeintext">brushfire/api/controllers/TutorialController.js</code></span> and set the <span><code class="codeintext">videoOrder</code></span> property to an empty array in the <span><code class="codeintext">createTutorial</code></span> action similar to listing 13.17.</p>

    <p class="codelistingcaption">Listing 13.17  Setting the videoOrder property in the <span class="italics1">createTutorial</span> action</p><code class="codebcxspfirst">      ...</code> <code class="codebcxspmiddle">      Tutorial.create({</code> <code class="codebcxspmiddle">        title: req.param('title'),</code> <code class="codebcxspmiddle">        description: req.param('description'),</code> <code class="codebcxspmiddle">        owner: foundUser.id,</code> <code class="codebcxspmiddle">        videoOrder: [],     <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">      })</code> <code class="codebcxspmiddle">      .exec(function(err, createdTutorial){</code> <code class="codebcxspmiddle">        if (err) return res.negotiate(err);</code><code class="codebcxsplast">...</code>

    <p class="codeannotation pcalibre7"><span class="codeannotationcueballs2">❶ </span> set the <span><code class="codeintext1">videoOrder</code></span> property to an empty array</p>

    <p class="body">Next let’s add the <span><code class="codeintext">videoid</code></span> to the <span><code class="codeintext">tutorial.videoOrder</code></span> array when a new video is created. Head back to brushfire/api/controllers/TutorialController.js in Sublime, and add the following code  similar to listing 13.18.</p>

    <p class="codelistingcaption">Listing 13.18 Adding a video <span class="italics1">id </span> to the <span class="italics1">tutorial.videoOrder</span> array</p><code class="codebcxspfirst">      ...</code> <code class="codebcxspmiddle">      Video.create({</code> <code class="codebcxspmiddle">        tutorialAssoc: foundTutorial.id,</code> <code class="codebcxspmiddle">        title: req.param('title'),</code> <code class="codebcxspmiddle">        src: req.param('src'),</code> <code class="codebcxspmiddle">        lengthInSeconds: req.param('hours') * 60 * 60 + req.param('minutes') * 60 + req.param('seconds')</code> <code class="codebcxspmiddle">      }).exec(function (err, createdVideo) {</code> <code class="codebcxspmiddle">        if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">        foundTutorial.videoOrder.push(createdVideo.id);   /<span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">        foundTutorial.save(function (err){</code> <code class="codebcxspmiddle">          if (err) return res.negotiate(err);</code><code class="codebcxsplast">       ...</code>

    <p class="codeannotation pcalibre7"><span class="codeannotationcueballs2">❶ </span>  push the <span><code class="codeintext1">videoid</code></span> to the <span><code class="codeintext1">videoOrder</code></span> array</p>

    <p class="body">Now that we’ve added the <span><code class="codeintext">videoid</code></span> to the array, we’ll use it to calculate the sort order when the <span class="italics">Tutorial detail page</span> is rendered. In Sublime, open <span><code class="codeintext">brushfire/api/controllers/PageController.js</code></span> and add the following code to the <span><code class="codeintext">tutorialDetail</code></span> action in listing 13.19.</p>

    <p class="codelistingcaption">Listing 13.19 Adding the sorting code to the <span><code class="codeintext1">tutorialDetail</code></span> action</p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">foundTutorial.videos = _.sortBy(foundTutorial.videos, function getRank (video) {  <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">  return _.indexOf(foundTutorial.videoOrder,video.id);   <span class="codeannotationcueballs1">❷ </span></code><code class="codebcxsplast">});</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶ </span> Use <span><code class="codeintext1">_.sortBy</code></span> to iterate over the videos and sort by whatever is returned.</p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❷ </span> Return the index of the <span class="italics1">video id</span> in the <span class="italics1">videoOrder</span> arra.y</p>

    <p class="body">Here’s how it works. Let’s say <span><code class="codeintext">tutorial.videoOrder</code></span> has 3 video ids<span><code class="codeintext">[4, 3, 5]</code></span>and <span><code class="codeintext">tutorial.videos</code></span> is<span><code class="codeintext">[{id: 5}, {id: 4}, {id: 3}]</code></span>. After iterating through <span><code class="codeintext">_.sortBy</code></span> the <span><code class="codeintext">tutorial.videos</code></span> array is transformed into<span><code class="codeintext">[{id: 4}, {id: 3}, {id: 5}]</code></span>. Now let’s enable the user to reorder the videos from the <span class="italics">Tutorial detail page</span>.  When a tutorial contains more than one video, the user can click an up or down arrow to adjust the sort order similar to figure 13.7.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/13_07.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 13.7  User’s can reorder the videos using <span class="codeannotationcueballs">① </span>  the up and down sort order buttons.</p>

    <p class="body">Let’s enable the up button first. In Sublime, open <span><code class="codeintext">brushfire/api/controllers/video/VideoController.js</code></span> and add the following code to <span><code class="codeintext">reorderVideoUp</code></span> action in listing 13.20.</p>

    <p class="codelistingcaption">Listing 13.20  Moving a  video up in the sort order</p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">reorderVideoUp: function(req, res) {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    Video.findOne({    <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">      id: +req.param('id')</code> <code class="codebcxspmiddle">    })</code> <code class="codebcxspmiddle">    .populate('tutorialAssoc') <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle">    .exec(function(err, video){</code> <code class="codebcxspmiddle">      if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle">      if (!foundVideo) return res.notFound();</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      if (req.session.userId !== foundVideo.tutorialAssoc.owner) {  <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle">        return res.forbidden();</code> <code class="codebcxspmiddle">      }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      var indexOfVideo = _.indexOf(video.tutorialAssoc.videoOrder, +req.param('id'));  <span class="codeannotationcueballs1">❹ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      if (indexOfVideo === 0) {   <span class="codeannotationcueballs1">❺ </span></code> <code class="codebcxspmiddle">        return res.badRequest('This video is already at the top of the list.');</code> <code class="codebcxspmiddle">      }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      video.tutorialAssoc.videoOrder.splice(indexOfVideo, 1); <span class="codeannotationcueballs1">❻ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      video.tutorialAssoc.videoOrder.splice(indexOfVideo-1, 0, +req.param('id'));  <span class="codeannotationcueballs1">❼ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      video.tutorialAssoc.save(function (err) {   <span class="codeannotationcueballs1">❽ </span></code> <code class="codebcxspmiddle">        if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle">        return res.ok();</code> <code class="codebcxspmiddle">      });</code> <code class="codebcxspmiddle">    });</code> <code class="codebcxspmiddle">  },</code><code class="codebcxsplast">...</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶ </span> Find the <span><code class="codeintext1">video</code></span> you’re sorting.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❷ </span> Populate the <span><code class="codeintext1">tutorial</code></span> that’s associated with the <span><code class="codeintext1">video.</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❸ </span> Assure that the currently authenticated user agent owns the <span><code class="codeintext1">tutorial.</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❹ </span> Find the index of the <span><code class="codeintext1">videoid</code></span> in the embedded <span><code class="codeintext1">videoOrder</code></span> array.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❺ </span> If the index is <span><code class="codeintext1">0,</code></span> it’s already at the top of the list.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❻ </span> Remove the <span><code class="codeintext1">videoid</code></span> from the <span><code class="codeintext1">videoOrder</code></span> array.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❼ </span> Add the <span><code class="codeintext1">videoid</code></span> up in order by splicing it into the <span><code class="codeintext1">videoOrder</code></span> array using <span><code class="codeintext1">indexOfVideo-1.</code></span></p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❽ </span> Save the changes to the <span><code class="codeintext1">tutorial</code></span> using the <span><code class="codeintext1">tutorialAssoc</code></span> association.</p>

    <p class="body">We’ll use similar code to move a video down in sort order. Return to <span><code class="codeintext">brushfire/api/controllers/video/VideoController.js</code></span> and add the following code to <span><code class="codeintext">reorderVideoDown</code></span> action in listing 13.21.</p>

    <p class="codelistingcaption">Listing 13.21 Moving a  video down in the sort order</p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">reorderVideoDown: function(req, res) {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">  Video.findOne({</code> <code class="codebcxspmiddle">    id: +req.param('id')</code> <code class="codebcxspmiddle">  })</code> <code class="codebcxspmiddle">  .populate('tutorialAssoc')</code> <code class="codebcxspmiddle">  .exec(function (err, foundVideo){</code> <code class="codebcxspmiddle">    if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle">    if (!foundVideo) return res.notFound();</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    if (req.session.userId !== foundVideo.tutorialAssoc.owner) {  <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle">      return res.forbidden();</code> <code class="codebcxspmiddle">    }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    var indexOfVideo = _.indexOf(foundVideo.tutorialAssoc.videoOrder, +req.param('id'));</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    var numberOfTutorials = foundVideo.tutorialAssoc.videoOrder.length;  <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    if (indexOfVideo === numberOfTutorials) {   <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle">      return res.badRequest('This video is already at the bottom of the list.');</code> <code class="codebcxspmiddle">    }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    foundVideo.tutorialAssoc.videoOrder.splice(indexOfVideo, 1);</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    foundVideo.tutorialAssoc.videoOrder.splice(indexOfVideo+1, 0,  +req.param('id'));   <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    foundVideo.tutorialAssoc.save(function (err) {</code> <code class="codebcxspmiddle">      if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle">      return res.ok();</code> <code class="codebcxspmiddle">    });</code> <code class="codebcxspmiddle">  });</code> <code class="codebcxspmiddle">}</code><code class="codebcxsplast">...</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶ </span> Assign the length of the <span><code class="codeintext1">videoOrder</code></span> array to <span><code class="codeintext1">numberOfTutorials.</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❷ </span> If the current index of the <span><code class="codeintext1">videoid</code></span> is at the end of the <span><code class="codeintext1">videoOrder</code></span> array respond with a  <span><code class="codeintext1">badRequest().</code></span></p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❸ </span> Add the <span><code class="codeintext1">videoed</code></span> down in order by splicing it into the <span><code class="codeintext1">videoOrder</code></span> array using <span><code class="codeintext1">indexOfVideo+1.</code></span></p>

    <h3 class="head1" id="heading_id_12">13.3.5   Integrating a video player</h3>

    <p class="body">Each video is displayed in a list on the <span class="italics">Tutorial detail page</span>. When the user selects a video, the <span class="italics">Video player page</span> will be displayed similar to figure 13.8. Let’s implement this.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/13_08.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 13.8 The video player page.</p>

    <p class="body">The video player contains the YouTube video in an iframe, a back button to the tutorial and a chat interface that we’ll implement in chapter 14. The API reference reveals the endpoint has two incoming parameters <span><code class="codeintext">tutorialID</code></span> and the <span><code class="codeintext">id</code></span> of the <span><code class="codeintext">video</code></span> record as well as an authenticated and unauthenticated response. In Sublime, open <span><code class="codeintext">brushfire/api/controller/PageController.js</code></span> and add the following code to the <span><code class="codeintext">showVideo</code></span> action similar to listing 13.22.</p>

    <p class="codelistingcaption">Listing 13.22 Implementing the showVideo endpoint</p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">  showVideo: function(req, res) {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">FAKE_CHAT = [{</code> <code class="codebcxspmiddle">      username: 'sailsinaction',</code> <code class="codebcxspmiddle">      message: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur bibendum ornare.',</code> <code class="codebcxspmiddle">      created: '2 minutes ago',</code> <code class="codebcxspmiddle">      gravatarURL: 'http://www.gravatar.com/avatar/ef3eac6c71fdf24b13db12d8ff8d1264'</code> <code class="codebcxspmiddle">    }]</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    Video.findOne({   <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">      id: +req.param('id')</code> <code class="codebcxspmiddle">    }).exec(function (err, foundVideo){</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      if (!req.session.userId) {  <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle">        return res.view('show-video', {</code> <code class="codebcxspmiddle">          me: null,</code> <code class="codebcxspmiddle">          video: foundVideo,</code> <code class="codebcxspmiddle">          tutorialId: req.param('tutorialId')</code> <code class="codebcxspmiddle">        });</code> <code class="codebcxspmiddle">      }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      User.findOne({   <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle">        id: +req.session.userId</code> <code class="codebcxspmiddle">      }).exec(function (err, foundUser) {</code> <code class="codebcxspmiddle">        if (err) {</code> <code class="codebcxspmiddle">          return res.negotiate(err);</code> <code class="codebcxspmiddle">        }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">        if (!foundUser) {</code> <code class="codebcxspmiddle">          sails.log.verbose('Session refers to a user who no longer exists');</code> <code class="codebcxspmiddle">        }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">        return res.view('show-video', {  <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle">          me: {</code> <code class="codebcxspmiddle">            username: foundUser.username,</code> <code class="codebcxspmiddle">            gravatarURL: foundUser.gravatarURL,</code> <code class="codebcxspmiddle">            admin: foundUser.admin</code> <code class="codebcxspmiddle">          },</code> <code class="codebcxspmiddle">          video: foundVideo,</code> <code class="codebcxspmiddle">          tutorialId: req.param('tutorialId')</code> <code class="codebcxspmiddle">        });</code> <code class="codebcxspmiddle">      });</code> <code class="codebcxspmiddle">    });</code><code class="codebcxsplast">  }</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶ </span> Find the <span><code class="codeintext1">video</code></span> to play.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❷ </span>  If the user is not authenticated return locals for the unauthenticated state.</p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❸ </span>  Find the currently authenticated user and return locals for the authenticated state.</p>

    <h3 class="head1" id="heading_id_13">13.3.6   Cascading delete</h3>

    <p class="body">When a <span><code class="codeintext">tutorial</code></span> is deleted it is important to also remove any associated videos and ratings. In Sublime open <span><code class="codeintext">brushfire/api/controllers/TutorialController.js</code></span> and add the following code to the <span><code class="codeintext">deleteTutorial</code></span> action similar to listing 13.23.</p>

    <p class="codelistingcaption">Listing 13.23 Deleting a <span><code class="codeintext1">tutorial</code></span> in the <span><code class="codeintext1">deleteTutorial</code></span> action</p><code class="codebcxspfirst">  ...</code> <code class="codebcxspmiddle">  deleteTutorial: function(req, res) {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    User.findOne({            <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">      id: req.session.userId</code> <code class="codebcxspmiddle">    }).exec(function (err, foundUser){</code> <code class="codebcxspmiddle">      if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle">      if (!foundUser) return res.notFound();</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      Tutorial.findOne({      <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle">        id: +req.param('id')</code> <code class="codebcxspmiddle">      })</code> <code class="codebcxspmiddle">      .populate('owner')      <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle">      .populate ('ratings')   <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle">      .populate('videos')     <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle">      .exec(function(err, foundTutorial){</code> <code class="codebcxspmiddle">        if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle">        if (!foundTutorial) return res.notFound();</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">        if (foundUser.id != foundTutorial.owner.id) {   <span class="codeannotationcueballs1">❹ </span></code> <code class="codebcxspmiddle">          return res.forbidden();</code> <code class="codebcxspmiddle">        }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">        Tutorial.destroy({    <span class="codeannotationcueballs1">❺ </span></code> <code class="codebcxspmiddle">          id: req.param('id')</code> <code class="codebcxspmiddle">        }).exec(function(err){</code> <code class="codebcxspmiddle">          if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">          Video.destroy({     <span class="codeannotationcueballs1">❻ </span></code> <code class="codebcxspmiddle">            id: _.pluck(foundTutorial.videos, 'id')</code> <code class="codebcxspmiddle">          }).exec(function (err){</code> <code class="codebcxspmiddle">            if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">            Rating.destroy({  <span class="codeannotationcueballs1">❼ </span></code> <code class="codebcxspmiddle">              id: _.pluck(foundTutorial.ratings, 'id')</code> <code class="codebcxspmiddle">            }).exec(function (err){</code> <code class="codebcxspmiddle">              if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">              return res.json({username: foundUser.username});</code> <code class="codebcxspmiddle">            });</code> <code class="codebcxspmiddle">          });</code> <code class="codebcxspmiddle">        });</code> <code class="codebcxspmiddle">      });</code> <code class="codebcxspmiddle">    });</code><code class="codebcxsplast">  },</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶   </span>Find the currently authenticated.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❸   </span>Populate the <span><code class="codeintext1">owner</code></span>, <span><code class="codeintext1">ratings</code></span>, and <span><code class="codeintext1">videos</code></span> associations.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❹   </span>Assure that the current <span><code class="codeintext1">user</code></span> is the <span><code class="codeintext1">owner</code></span> of the <span><code class="codeintext1">tutorial.</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❺   </span>Destroy the <span><code class="codeintext1">tutorial.</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❻   </span>Use <span><code class="codeintext1">_.pluck</code></span> to build up an array of videos to destroy.</p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❼   </span>Use <span><code class="codeintext1">_.pluck</code></span> to build up an array of ratings to destroy.</p>

    <p class="body">After retrieving the tutorial and populating owner, ratings, and videos, we’ll use the .pluck() method to return an array of video and rating id. We’ll then use those arrays to destroy the associated records.</p>

    <h3 class="head1" id="heading_id_14">13.3.7   Removing a record from a collection</h3>

    <p class="body">We also need to enable the front-end request to <span class="italics">Delete a video</span>. In Sublime open <span><code class="codeintext">brushfire/api/controllers/TutorialController.js</code></span> and add the following code to the <span><code class="codeintext">removeVideo</code></span> action similar to listing 13.24.</p>

    <p class="codelistingcaption">Listing 13.24 Deleting a <span><code class="codeintext1">video</code></span> in the <span><code class="codeintext1">removeVideo</code></span> action</p><code class="codebcxspfirst">  ...</code> <code class="codebcxspmiddle">  removeVideo: function(req, res) {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    Tutorial.findOne({  <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">      id: +req.param('tutorialId')</code> <code class="codebcxspmiddle">    })</code> <code class="codebcxspmiddle">    .exec(function (err, foundTutorial){</code> <code class="codebcxspmiddle">      if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle">      if (!foundTutorial) return res.notFound();</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      if (req.session.userId !== foundTutorial.owner) {  <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle">        return res.forbidden();</code> <code class="codebcxspmiddle">      }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      foundTutorial.videos.remove(+req.param('id'));     <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      foundTutorial.videoOrder = _.without(foundTutorial.videoOrder, +req.param('id'));  <span class="codeannotationcueballs1">❹ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      foundTutorial.save(function (err){  <span class="codeannotationcueballs1">❺ </span></code> <code class="codebcxspmiddle">        if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">        Video.destroy({                   <span class="codeannotationcueballs1">❻ </span></code> <code class="codebcxspmiddle">          id: +req.param('id')</code> <code class="codebcxspmiddle">        }).exec(function(err){</code> <code class="codebcxspmiddle">          if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">          return res.ok();</code> <code class="codebcxspmiddle">        });</code> <code class="codebcxspmiddle">      });</code> <code class="codebcxspmiddle">    });</code> <code class="codebcxspmiddle">  },</code><code class="codebcxsplast">...</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶ </span> Find the tutorial that contains the <span><code class="codeintext1">video</code></span> to delete.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❷ </span> Assure that the currently authenticated user is the <span><code class="codeintext1">tutorialowner.</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❸ </span> Remove the video from the videos association attribute.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❹ </span> Remove the video <span class="italics1">id</span> from the <span><code class="codeintext1">tutorial.video</code></span> attribute using the <span><code class="codeintext1">_.without()</code></span> method.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❺ </span> Save the changes to the  <span><code class="codeintext1">foundTutoria.l</code></span></p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❻ </span> Destroy the <span><code class="codeintext1">video</code></span> in the <span><code class="codeintext1">video</code></span> model.</p>

    <h2 class="head" id="heading_id_15">13.4   Implementing support for followers</h2>

    <p class="body">Part of the Brushfire post-pivot feature requests were to enable users with the ability to follow other users and the tutorials they created. Therefore we need a way to associate users with each other. Sails makes it simple to configure this type of relationship. In the <span><code class="codeintext">user</code></span> model we already created two association attributes --<span><code class="codeintext">followers</code></span> and <span><code class="codeintext">following</code></span> from the repo you originally cloned in chapter 11.Let’s take a look at the model configuration in Sublime by opening <span><code class="codeintext">brushfire/api/models/User.js</code></span> similar to listing 13.25.</p>

    <p class="codelistingcaption">Listing 13.25 Configured <span><code class="codeintext1">followers</code></span> and <span><code class="codeintext1">following</code></span> attributes in the <span><code class="codeintext1">user</code></span> model</p><code class="codebcxspfirst">    ...</code> <code class="codebcxspmiddle">    // Who is following me?</code> <code class="codebcxspmiddle">    followers: {</code> <code class="codebcxspmiddle">      collection: 'user',</code> <code class="codebcxspmiddle">      via: 'following'</code> <code class="codebcxspmiddle">    },</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    // Who am I following?</code> <code class="codebcxspmiddle">    following: {</code> <code class="codebcxspmiddle">      collection: 'user',</code> <code class="codebcxspmiddle">      via: 'followers'</code> <code class="codebcxspmiddle">    },</code><code class="codebcxsplast">    ...</code>

    <p class="body">That’s it. The <span><code class="codeintext">user</code></span> model now has attributes that will track for <span><code class="codeintext">followers</code></span> and <span><code class="codeintext">following</code></span> users. The two association attributes “point” to each other as a <span><code class="codeintext">collection</code></span> using the <span><code class="codeintext">via</code></span> parameter. </p>

    <h3 class="head1" id="heading_id_16">13.4.1   The <span><code class="codeintext1">follow</code></span> and <span><code class="codeintext1">unfollow</code></span> endpoints</h3>

    <p class="body">An authenticated user agent may <span><code class="codeintext">follow</code></span> or <span><code class="codeintext">unfollow</code></span> a user by clicking on the <span class="italics">Follow me</span> or <span class="italics">Unfollow me</span> buttons as illustrated in figure 13.9.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/13_09.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 13.9   The <span class="codeannotationcueballs">① </span>  follow and <span class="codeannotationcueballs">② </span>  unfollow buttons on the user profile toggle whether the <span><code class="codeintext1">user</code></span> is following another <span><code class="codeintext1">user</code></span>.</p>

    <p class="body">The <span><code class="codeintext">follow</code></span> action was added to the assets of the project you cloned back in chapter 11. Let’s take a look. In Sublime, open <span><code class="codeintext">brushfire/api/controllers/UserController.js</code></span> and review the <span><code class="codeintext">follow</code></span> action code similar to listing 13.26.</p>

    <p class="codelistingcaption">Listing 13.26  Reviewing the <span><code class="codeintext1">follow</code></span> action of the <span><code class="codeintext1">User</code></span> controller.</p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">follow: function(req, res) {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">  User.findOne({           <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">    username: req.param('username'),</code> <code class="codebcxspmiddle">  })</code> <code class="codebcxspmiddle">  .populate('followers')   <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle">  .populate('following')   <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle">  .exec(function (err, foundUser){</code> <code class="codebcxspmiddle">    if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle">    if (!foundUser) return res.notFound();</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    if (foundUser.id === req.session.userId) {     <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle">        return res.forbidden();</code> <code class="codebcxspmiddle">    }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    foundUser.followers.add(req.session.userId);   <span class="codeannotationcueballs1">❹ </span></code> <code class="codebcxspmiddle">    foundUser.save(function (err, updatedUser){    <span class="codeannotationcueballs1">❺ </span></code> <code class="codebcxspmiddle">      if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle">      if (!updatedUser) return res.notFound();</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      return res.json({   <span class="codeannotationcueballs1">❻ </span></code> <code class="codebcxspmiddle">        numOfFollowers: updatedUser.followers.length,</code> <code class="codebcxspmiddle">        numOfFollowing: updatedUser.following.length,</code> <code class="codebcxspmiddle">        followers: updatedUser.followers,</code> <code class="codebcxspmiddle">        following: updatedUser.following</code> <code class="codebcxspmiddle">      });</code> <code class="codebcxspmiddle">    });</code> <code class="codebcxspmiddle">  });</code><code class="codebcxsplast">},</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶   </span>Find the <span><code class="codeintext1">owner</code></span> of the <span><code class="codeintext1">profile.</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❷   </span>Populate the user’s <span><code class="codeintext1">following</code></span> and <span><code class="codeintext1">follow</code></span> association attributes.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❸   </span>Assure that the authenticated user is not the current profile.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❹   </span>Add the currently authenticated user’s <span><code class="codeintext1">id</code></span> to the <span><code class="codeintext1">profile</code></span> owner’s <span><code class="codeintext1">followers</code></span> attribute.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❺   </span>Save the changes to the profile <span><code class="codeintext1">owner.</code></span></p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❻   </span>Respond with the number of followers and following, as well as their arrays of <span><code class="codeintext1">user</code></span> dictionaries.</p>

    <p class="body">When an authenticated user clicks on the <span class="italics">Follow me</span> button their <span><code class="codeintext">userid</code></span> is added to the profile owner’s <span><code class="codeintext">following</code></span> attribute. Later when we populate on the profile owner’s <span><code class="codeintext">following</code></span> attribute, we get an array of dictionaries of users that are following this profile owner. The <span><code class="codeintext">unfollow</code></span> input is identical except we use the <span><code class="codeintext">.remove()</code></span>method instead of the <span><code class="codeintext">.add()</code></span>method.</p>

    <h3 class="head1" id="heading_id_17">13.4.2   Displaying a user’s followers on her profile</h3>

    <p class="body">The follower/following relationship is manifest in the three user profile page configurations – <span class="italics">tutorial, following, and followers</span> similar to figure 13.10.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/13_10.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 13.10  The three profile page configurations in authenticated and unauthenticated states.</p>

    <p class="body">Let’s first implement the profile page with tutorials. In Sublime, open <span><code class="codeintext">brushfire/api/controllers/PageController.js</code></span> and add the following code to the <span><code class="codeintext">profile</code></span> action similar to listing 13.27.</p>

    <p class="codelistingcaption">Listing 13.27  Initial queries for the user profile page with tutorials</p><code class="codebcxspfirst">  ...</code> <code class="codebcxspmiddle">  profile: function(req, res) {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    User.findOne({             <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">      username: req.param('username')</code> <code class="codebcxspmiddle">    })</code> <code class="codebcxspmiddle">    .populate("followers")     <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle">    .populate("following")     <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle">    .exec(function (err, foundUser){</code> <code class="codebcxspmiddle">      if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle">      if (!foundUser) return res.notFound();</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      Tutorial.find({where: {  <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle">        owner: foundUser.id</code> <code class="codebcxspmiddle">      }, sort: 'title ASC'})</code> <code class="codebcxspmiddle">      .populate('ratings')     <span class="codeannotationcueballs1">❹ </span></code> <code class="codebcxspmiddle">      .populate('videos')      <span class="codeannotationcueballs1">❹ </span></code> <code class="codebcxspmiddle">      .exec(function (err, foundTutorials){</code> <code class="codebcxspmiddle">        if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle">        if (!foundTutorials) return res.notFound();</code><code class="codebcxsplast">        ...</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶ </span>  Find the <span><code class="codeintext1">owner</code></span> of the profile.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❷   </span>Populate the user’s <span><code class="codeintext1">following</code></span> and <span><code class="codeintext1">follow</code></span> association attributes.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❸   </span>Find all of the tutorials for the profile <span><code class="codeintext1">owner</code></span> and sort in ascending order.</p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❹   </span>Populate the tutorial’s <span><code class="codeintext1">ratings</code></span> and <span><code class="codeintext1">videos</code></span> association attributes.</p>

    <div class="sgc3">
      <p class="sidebarc">If you are adding the code via the online gist, listings 13.27, 13.28, 13.29, and 13.30 are excerpts of the same gist.</p>
    </div>

    <p class="body">Notice that we are using <span><code class="codeintext">where</code></span> and <span><code class="codeintext">sort</code></span> in the query criteria. It’s a best practice to use the <span><code class="codeintext">where</code></span> clause anytime you want to also include query options <span><code class="codeintext">sort</code></span>, <span><code class="codeintext">limit</code></span>, and/or <span><code class="codeintext">skip</code></span>. If the <span><code class="codeintext">where</code></span> clause is excluded the entire dictionary is treated as <span><code class="codeintext">where</code></span> criteria. After completing the initial queries, we’ll iterate through each tutorial making similar transformations that we’ve done in previous actions. Head back to Sublime and add the code in listing 13.28.</p>

    <p class="codelistingcaption">Listing 13.28 Transforming each tutorial’s attributes</p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">_.each(foundTutorials, function(tutorial){    <span class="codeannotationcueballs1">❶ </span>   </code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">  tutorial.owner = foundUser.username;        <span class="codeannotationcueballs1">❷ </span>   </code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">  tutorial.created = DatetimeService.getTimeAgo({date: tutorial.createdAt});  <span class="codeannotationcueballs1">❸</span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">  var totalSeconds = 0;</code> <code class="codebcxspmiddle">  _.each(tutorial.videos, function(video){    <span class="codeannotationcueballs1">❹ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    totalSeconds = totalSeconds + video.lengthInSeconds;    <span class="codeannotationcueballs1">❺ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    tutorial.totalTime = DatetimeService.getHoursMinutesSeconds({totalSeconds: totalSeconds}).hoursMinutesSeconds;    <span class="codeannotationcueballs1">❻ </span></code> <code class="codebcxspmiddle">  });</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">  var totalRating = 0;</code> <code class="codebcxspmiddle">  _.each(tutorial.ratings, function(rating){  <span class="codeannotationcueballs1">❼ </span>  </code> <code class="codebcxspmiddle">    totalRating = totalRating + rating.stars;</code> <code class="codebcxspmiddle">  });</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">  var averageRating = 0;</code> <code class="codebcxspmiddle">  if (tutorial.ratings.length &lt; 1) {          <span class="codeannotationcueballs1">❽ </span></code> <code class="codebcxspmiddle">    averageRating = 0;                        <span class="codeannotationcueballs1">❽ </span>   </code> <code class="codebcxspmiddle">  } else {</code> <code class="codebcxspmiddle">    averageRating = totalRating / tutorial.ratings.length;  <span class="codeannotationcueballs1">❾ </span></code> <code class="codebcxspmiddle">  }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">  tutorial.averageRating = averageRating;     <span class="codeannotationcueballs1">❿ </span></code> <code class="codebcxspmiddle">});</code><code class="codebcxsplast">...</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶ </span> Iterate over the <span><code class="codeintext1">profile</code></span> owner’s tutorials.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❷   </span>Assign the user dictionary of the <span><code class="codeintext1">profileowner</code></span> to <span><code class="codeintext1">tutorial.owner.</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❸   </span>Format the created date using the <span><code class="codeintext1">DatetimeService.</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❹   </span>Iterate over the tutorial’s videos.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❺   </span>Add up the total number of seconds for all videos.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❻   </span>Format the <span><code class="codeintext1">totalTime</code></span> attribute with the <span><code class="codeintext1">DatetimeService.</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❼ </span>  Iterate over the tutorial’s ratings.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❽   </span>If no ratings assign <span><code class="codeintext1">averageRating</code></span> equal to 0.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❾ </span>  Calculate the average for <span><code class="codeintext1">averageRating.</code></span></p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❿   </span>Assign the <span><code class="codeintext1">average</code></span> to <span><code class="codeintext1">tutorial.averageRating.</code></span></p>

    <p class="body">If the user isn’t authenticated, we’ll send back counts for the profile owner’s followers, following, and tutorials as well as an array of tutorial dictionaries. From Sublime, add the code in listing 13.29.</p>

    <p class="codelistingcaption">Listing 13.29 Responding to the unauthenticated state of the <span><code class="codeintext1">profile</code></span> endpoint</p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">if (!req.session.userId) {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">  return res.view('profile', {</code> <code class="codebcxspmiddle">    me: null,</code> <code class="codebcxspmiddle">    username: foundUser.username,</code> <code class="codebcxspmiddle">    gravatarURL: foundUser.gravatarURL,</code> <code class="codebcxspmiddle">    frontEnd: {</code> <code class="codebcxspmiddle">      numOfTutorials: foundTutorials.length,</code> <code class="codebcxspmiddle">      numOfFollowers: foundUser.followers.length,</code> <code class="codebcxspmiddle">      numOfFollowing: foundUser.following.length</code> <code class="codebcxspmiddle">    },</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    tutorials: foundTutorials</code> <code class="codebcxspmiddle">  });</code> <code class="codebcxspmiddle">}</code><code class="codebcxsplast">...</code>

    <p class="body">Finally, we’ll respond with the owner’s followers, following, and tutorials as well as an array of tutorial dictionaries. In Sublime, add the following code in listing 13.30.</p>

    <p class="codelistingcaption">Listing 13.30  Responding to the authenticated state of the <span class="italics1">profile</span> endpoint</p><code class="codebcxspfirst">        ...</code> <code class="codebcxspmiddle">        User.findOne({  <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">          id: req.session.userId</code> <code class="codebcxspmiddle">        })</code> <code class="codebcxspmiddle">        .exec(function (err, loggedInUser){</code> <code class="codebcxspmiddle">          if (err) {</code> <code class="codebcxspmiddle">            return res.negotiate(err);</code> <code class="codebcxspmiddle">          }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">          if (!loggedInUser) {</code> <code class="codebcxspmiddle">            return res.serverError('User record from logged in user is missing?');</code> <code class="codebcxspmiddle">          }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">          var cachedFollower = _.find(foundUser.followers, function(follower){  <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle">            return follower.id === loggedInUser.id;</code> <code class="codebcxspmiddle">          });</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">          var followedByLoggedInUser = false;</code> <code class="codebcxspmiddle">          if (cachedFollower) {  <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle">            followedByLoggedInUser = true;</code> <code class="codebcxspmiddle">          }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">          var me = {  <span class="codeannotationcueballs1">❹ </span></code> <code class="codebcxspmiddle">            username: loggedInUser.username,</code> <code class="codebcxspmiddle">            email: loggedInUser.email,</code> <code class="codebcxspmiddle">            gravatarURL: loggedInUser.gravatarURL,</code> <code class="codebcxspmiddle">            admin: loggedInUser.admin</code> <code class="codebcxspmiddle">          };</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">          if (req.session.userId === foundUser.id) {  <span class="codeannotationcueballs1">❺ </span></code> <code class="codebcxspmiddle">            me.isMe = true;</code> <code class="codebcxspmiddle">          } else {</code> <code class="codebcxspmiddle">            me.isMe = false;</code> <code class="codebcxspmiddle">          }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">          return res.view('profile', {  <span class="codeannotationcueballs1">❻ </span></code> <code class="codebcxspmiddle">            me: me,</code> <code class="codebcxspmiddle">            showAddTutorialButton: true,</code> <code class="codebcxspmiddle">            username: foundUser.username,</code> <code class="codebcxspmiddle">            gravatarURL: foundUser.gravatarURL,</code> <code class="codebcxspmiddle">            frontEnd: {</code> <code class="codebcxspmiddle">              numOfTutorials: foundTutorials.length,</code> <code class="codebcxspmiddle">              numOfFollowers: foundUser.followers.length,</code> <code class="codebcxspmiddle">              numOfFollowing: foundUser.following.length,</code> <code class="codebcxspmiddle">              followedByLoggedInUser: followedByLoggedInUser</code> <code class="codebcxspmiddle">            },</code> <code class="codebcxspmiddle">            tutorials: foundTutorials</code> <code class="codebcxspmiddle">          });</code> <code class="codebcxspmiddle">        }); //&lt;/ User.findOne({id: req.session.userId})</code> <code class="codebcxspmiddle">      });</code> <code class="codebcxspmiddle">    });</code> <code class="codebcxspmiddle">  },</code><code class="codebcxsplast">  ...</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶   </span>Find the currently authenticated user.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❷   </span>Iterate over the profile owner’s tutorials to determine whether the current user is a follower.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❸   </span>If the currently authenticated user is a follower of the profile owner set <span><code class="codeintext1">followedByLoginedInUser</code></span> equal to <span><code class="codeintext1">true</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❹   </span>Provide locals for the navigation bar.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❺   </span>Check to see if the current user is the authenticated owner.</p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❻   </span>Respond with the necessary locals.</p>

    <p class="body">When the user agent is authenticated we will find her user dictionary and then look in the owner’s followers to determine whether she is a follower-- her user <span><code class="codeintext">id</code></span> is in the owner’s follower’s array. If it is we set the <span><code class="codeintext">followedByLoggedInUser</code></span> to <span><code class="codeintext">true</code></span>. We will also check whether she is the profile owner.</p>

    <p class="body">There are two other <span><code class="codeintext">profile</code></span> actions – <span><code class="codeintext">profileFollower</code></span> and <span><code class="codeintext">profileFollowing</code></span>. These actions use very similar code to the <span><code class="codeintext">profile</code></span> action, but they do not require the formatting of the tutorials. Replace the current <span><code class="codeintext">profileFollower</code></span> and <span><code class="codeintext">profileFollowing</code></span> actions from the following gist:<a class="pcalibre8 pcalibre5" href="https://gist.github.com/sailsinaction/68cd5dfd853a8781cd5aca42784f0f54">https://gist.github.com/sailsinaction/68cd5dfd853a8781cd5aca42784f0f54</a>.Once implemented we will have all three configurations of the profile page.</p>

    <h2 class="head" id="heading_id_18">13.5   Search</h2>

    <p class="body">Advanced search with support for indexing is out of the scope of this book.  But it’s not that bad!  For example, GitHub uses a special database called ElasticSearch to allow users to search code files, issues, and repos.  You can integrate this technology in your own app in a matter of days, or even hours.  But here, to we’ll show a simpler approach: instead of relying on a 3<span class="superscript">rd</span> party tool, we’ll simply use the ORM. Specifically, we’ll support searching tutorials based on their <span><code class="codeintext">title</code></span> and/or <span><code class="codeintext">description</code></span> similar to figure 13.11.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/13_11.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 13.11 The search page has two different requests to the <span class="italics1">Search result</span> endpoint that uses <span><code class="codeintext1">searchCriteria</code></span> as an incoming parameter.</p>

    <p class="body">Both the <span class="italics">search</span> and <span class="italics">search more tutorials</span> buttons trigger the <span><code class="codeintext">searchTutorials</code></span> action of the <span><code class="codeintext">TutorialController</code></span>. The <span class="italics">searchTutorials</span> action also uses the <span><code class="codeintext">limit</code></span> and <span><code class="codeintext">skip</code></span> query options to manage pagination.</p>

    <h3 class="head1" id="heading_id_19">13.5.1   Paginating search results</h3>

    <p class="body">We want the search results to display a maximum of 10 results. Thereafter, we’ll paginate in lots of ten tutorials per page. In Sublime, you open <span><code class="codeintext">brushfire/api/controllers/TutorialController.js</code></span> and add the following code to the <span><code class="codeintext">searchTutorials</code></span> action similar to listing 13.31.</p>

    <p class="codelistingcaption">Listing 13.31 Implementing the <span class="italics1">searchTutorials</span> action – the search criteria</p><code class="codebcxspfirst">  ...</code> <code class="codebcxspmiddle">  searchTutorials: function(req, res) {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    Tutorial.count().exec(function(err, found){  <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">      if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle">      if (!found) return res.notFound();</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      Tutorial.find({  <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle">        or : [</code> <code class="codebcxspmiddle">          {</code> <code class="codebcxspmiddle">            title: {</code> <code class="codebcxspmiddle">              'contains': req.param('searchCriteria')</code> <code class="codebcxspmiddle">            },</code> <code class="codebcxspmiddle">          },</code> <code class="codebcxspmiddle">          {</code> <code class="codebcxspmiddle">            description: {</code> <code class="codebcxspmiddle">              'contains': req.param('searchCriteria')</code> <code class="codebcxspmiddle">            }</code> <code class="codebcxspmiddle">          }</code> <code class="codebcxspmiddle">        ],</code> <code class="codebcxspmiddle">        limit: 10,  <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle">        skip: req.param('skip')  <span class="codeannotationcueballs1">❹ </span></code> <code class="codebcxspmiddle">      })</code> <code class="codebcxspmiddle">      .populate('owner')   <span class="codeannotationcueballs1">❺ </span></code> <code class="codebcxspmiddle">      .populate('ratings') <span class="codeannotationcueballs1">❺ </span></code> <code class="codebcxspmiddle">      .populate('videos')  <span class="codeannotationcueballs1">❺ </span></code> <code class="codebcxspmiddle">      .exec(function(err, tutorials){</code><code class="codebcxsplast">      ...</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶ </span> Calculate the number of tutorials.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❷ </span> Find all tutorials that contain the text of the <span><code class="codeintext1">searchCriteria</code></span> in either the <span><code class="codeintext1">title</code></span> or <span><code class="codeintext1">description</code></span> attributes.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❸  </span>Limit the number of responses to <span><code class="codeintext1">10.</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❹ </span> <span><code class="codeintext1">Skip</code></span> based upon the incoming <span><code class="codeintext1">skip</code></span> parameter.</p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❺ </span> Populate the <span><code class="codeintext1">owner</code></span><span class="italics1">,</span> <span><code class="codeintext1">ratings</code></span><span class="italics1">, and</span> <span><code class="codeintext1">videos</code></span> association attributes.</p>

    <div class="sgc3">
      <p class="sidebarc">For details about other query options for <span><code class="codeintext1">.find()</code></span><span class="italics1">,</span> <span><code class="codeintext1">.findOne()</code></span><span class="italics1">,</span> <span><code class="codeintext1">.create()</code></span><span class="italics1">,</span> <span><code class="codeintext1">.update()</code></span><span class="italics1">,</span> <span><code class="codeintext1">.destroy()</code></span><span class="italics1">,</span> <span><code class="codeintext1">.findOrCreate</code></span><span class="italics1">, or</span> <span><code class="codeintext1">.count()</code></span>see https://github.com/balderdashy/waterline-docs/blob/master/queries/query.md.</p>
    </div>

    <p class="body">Next, we will format the results of the search. In Sublime, add the following code in listing 13.32.</p>

    <p class="codelistingcaption">Listing 13.32 Implementing the <span class="italics1">searchTutorials</span> action – formatting  the search results</p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">        _.each(tutorials, function(tutorial){  <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">          tutorial.owner = tutorial.owner.username;</code> <code class="codebcxspmiddle">          tutorial.created = DatetimeService.getTimeAgo({date: tutorial.createdAt});</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">          // Determine the total seconds for all videos and each video</code> <code class="codebcxspmiddle">          var totalSeconds = 0;</code> <code class="codebcxspmiddle">          _.each(tutorial.videos, function(video){  <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">            // Total the number of seconds for all videos for tutorial total time</code> <code class="codebcxspmiddle">            totalSeconds = totalSeconds + video.lengthInSeconds;</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">            tutorial.totalTime = DatetimeService.getHoursMinutesSeconds({totalSeconds: totalSeconds}).hoursMinutesSeconds;</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">            // Format average ratings</code> <code class="codebcxspmiddle">            var totalRating = 0;</code> <code class="codebcxspmiddle">            _.each(tutorial.ratings, function(rating){  <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle">              totalRating = totalRating + rating.stars;</code> <code class="codebcxspmiddle">            });</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">            var averageRating = 0;</code> <code class="codebcxspmiddle">            if (tutorial.ratings.length &lt; 1) {</code> <code class="codebcxspmiddle">              averageRating = 0;</code> <code class="codebcxspmiddle">            } else {</code> <code class="codebcxspmiddle">              averageRating = totalRating / tutorial.ratings.length;</code> <code class="codebcxspmiddle">            }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">            tutorial.averageRating = averageRating;</code> <code class="codebcxspmiddle">          });</code> <code class="codebcxspmiddle">        });</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">        return res.json({</code> <code class="codebcxspmiddle">          options: {</code> <code class="codebcxspmiddle">            totalTutorials: found,</code> <code class="codebcxspmiddle">            updatedTutorials: tutorials</code> <code class="codebcxspmiddle">          }</code> <code class="codebcxspmiddle">        });</code> <code class="codebcxspmiddle">      });</code> <code class="codebcxspmiddle">    });</code><code class="codebcxsplast">  },</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶ </span>  iIerate through each <span><code class="codeintext1">tutorial</code></span> and format the <span><code class="codeintext1">owner</code></span> and <span><code class="codeintext1">created</code></span> attributes.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❷   </span>Iterate through each <span><code class="codeintext1">video</code></span> and calculate the <span><code class="codeintext1">totalTime</code></span> and individual <span><code class="codeintext1">video</code></span> length.</p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❸ </span>  iIerate through each <span><code class="codeintext1">rating</code></span> and calculate the average rating.</p>

    <h3 class="head1" id="heading_id_20">13.5.2   General pagination</h3>

    <p class="body">When the user clicks the <span class="italics">browse</span> button on the navigation toolbar, we want to display a maximum of ten tutorials on a page. Thereafter, we’ll paginate in lots of ten-tutorials per page. Figure 13.12 illustrates the tutorials for an initial browsing page.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/13_12.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 13.12  The <span class="italics1">Browse tutorial page</span> contains a Browse results endpoint trigger by the show more tutorials button.</p>

    <p class="body">The <span><code class="codeintext">browseTutorials</code></span> action is almost identical to the <span><code class="codeintext">searchTutorials</code></span> except for the criteria in the <span><code class="codeintext">.find()</code></span> method. We’ve provided the source code for the <span><code class="codeintext">browseTutorials</code></span> action in the following gist:</p>

    <p class="body"><a class="pcalibre8 pcalibre5" href="https://gist.github.com/sailsinaction/957bccce9d1c82bdec5f8a34fd0dcc60">https://gist.github.com/sailsinaction/957bccce9d1c82bdec5f8a34fd0dcc60</a>.</p>

    <h2 class="head" id="heading_id_21">13.6   Summary</h2>

    <p class="listbulletcxspfirst">·   The Ratings model uses a model association relationship to the user and tutorial models. The user and tutorial models use a collection association relationship with via to the ratings model.</p>

    <p class="listbulletcxspmiddle">·   As a general rule, code that is repeated in three different actions should be refactored into a service.</p>

    <p class="listbulletcxspmiddle">·   Use an embedded array attribute to manage the sort order because the array will not be queried outside of the tutorial model.</p>

    <p class="listbulletcxsplast">·   A following/follower relationship can be created by adding two collection association attributes in the same model with via.</p>
  </div>
</body>
</html>
