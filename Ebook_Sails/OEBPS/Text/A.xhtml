<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta content="Microsoft Word 12 (filtered)" name="Generator"/>
    <title>Style A ReadMe</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body class="calibre">
  <div class="section">
    <h1 class="tochead" id="heading_id_2">A    A brief history of Sails</h1>

    <p class="cosummaryhead">This appendix covers</p>

    <p class="cosummarybulletcxspfirst">·   How Sails was created</p>

    <p class="cosummarybulletcxsplast">·   A renaissance in web development</p>

    <p class="body">We’ve included this appendix for those who are interested in the story behind Sails, and why it is so useful today.</p>

    <h2 class="head" id="heading_id_3">A.1   A brief history of Sails</h2>

    <p class="body">The development of Sails began entirely by accident. Over the course of 2011 and 2012, Mike built a few different Node.js apps. Like many early Node.js users, he ended up organically accumulating code he could reuse across different projects. As you may already know, that works great for a while, but really what he needed was a framework.</p>

    <p class="body">But there wasn’t an MVC framework for Node.js yet. Most projects at that time directly incorporated two modules--Express and Socket.IO--which are great… but were never intended to be used as complete web frameworks. You had to write database queries by hand, and make crucial structural decisions on a case-by-case basis. This made it hard to build (and especially <span class="italics">maintain</span>) Node.js apps without a great deal of prior experience—not only with Node’s core libraries and module system, but with back-end apps in general.</p>

    <p class="body">Not to mention that back in those days, the community was full of brilliant hobbyists and tinkerers, but the software industry scoffed at using Node.js on anything serious. Solving that problem was the modus operandi for the first years Sails.js—like many of us, Mike believed in the power of Node.js and wanted to use it at work. He proselytized for months. But alas, some things just aren’t meant to be.</p>

    <p class="body">So Mike started doing front-end web development in his free time (contracting as a hired gun), with the hope he’d meet a client with an interesting use case; or better yet, someone who really “got” the promise of Node.js. Fortunately, he found two:  First, a guy we’ll call “G” who needed help building an entirely-real-time cloud storage application for his enterprise customers. Then a few weeks later, a woman named Jessa. She was building a social chat application, but didn’t know how to go about it in PHP. Thanks in no small part to these two folks, Mike was able to leave his job in 2012, form a team, and start using an early version of Sails on <span class="italics">everything</span>.</p>

    <p class="body">That’s when things got serious. Instead of relying on intermittent spurts of productivity to get stuff done, Mike and the core team were driven by paying customers to add new features and fix bugs. And since we were ultimately responsible for making sure everything worked, it meant that we were writing JavaScript on the server every day of the week.</p>

    <p class="body">The Sails framework really took off in Spring 2013 (version 0.8) when Mike created a “5 minute” screencast that ended up on the front page of the popular tech news site, Hacker News. Almost overnight, Sails was being used on real-world projects by developers from all sorts of diverse backgrounds: everything from Django to Java to ASP.net. The increasing popularity of Node.js itself fueled this even further; as more and more developers tried out Node and inevitably googled “Node.js MVC framework”, they discovered Sails.</p>

    <h2 class="head" id="heading_id_4">A.2   The second “renaissance” in web development</h2>

    <p class="body">The web has changed dramatically over the past ten years since Ruby on Rails and other developer-friendly Model-View-Controller (MVC) web frameworks were first introduced. These early projects popularized important ideas that are still prevalent in mainstream web development tools today. They also lowered the barrier to entry for becoming a full stack web developer, making it possible for a much larger group of individuals to build web apps.</p>

    <p class="body">Since they were designed for building websites, traditional web frameworks only needed to support a single user agent: the web browser. However, the widespread adoption of mobile devices like the iPhone changed everything. Modern web applications need to support all sorts of different user agents, from tablets to mobile handsets--even smart devices that don't have screens at all! </p>

    <div class="sgc3">
      <p class="sidebarc">A <span class="italics1">user agent</span> is a software application (like a web browser) that is acting on behalf of a user to send requests to your Sails app. We’ll reference a number of different types of user agents throughout the book.</p>
    </div>

    <p class="body">Fortunately, the last few years have brought with them a sort of second "renaissance" in web development. JavaScript frameworks like Angular, React, Ember, and Backbone make it much easier to build rich browser interfaces. Meanwhile, the ecosystem for building iOS and Android apps has tons of great tools, and the manufacturers of new smart devices are making it easier than ever before for developers to build client applications for their platforms. What all of these front-end frameworks have in common is a need for an easy way to prototype and implement the backend of the application.</p>

    <p class="body">The term “backend” means a lot of different things to different people, but in this book, we’ll go with the most common modern definition: the backend is the part of your code base that runs on servers. This is versus the frontend (or client-side) of your app, which communicates with your servers via web requests. Fulfilling the requirements of these requests is a backend developer’s primary focus. The most common responsibilities of any backend are fetching or working with persistent (saved) data, managing user login and signup, communicating with third-party APIs, and any other logic that can only be securely run in a trusted environment.</p>
  </div>
</body>
</html>
