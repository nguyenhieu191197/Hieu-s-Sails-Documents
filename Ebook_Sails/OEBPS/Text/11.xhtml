<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta content="Microsoft Word 12 (filtered)" name="Generator"/>
    <title>Style A ReadMe</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body class="calibre">
  <div class="section">
    <h1 class="tochead" id="heading_id_2">11    Refactoring</h1>

    <p class="cosummaryhead">This chapter covers</p>

    <p class="cosummarybulletcxspfirst">·   Organizing, implementing, and refactoring a project pivot</p>

    <p class="cosummarybulletcxspmiddle">·   Using the async library in Sails</p>

    <p class="cosummarybulletcxspmiddle">·   Customizing built-in responses</p>

    <p class="cosummarybulletcxsplast">·   Adding a password recovery system</p>

    <p class="body">It’s been several months since we delivered the last version of Brushfire to Chad. We thought we’d begin work on the next phase of content management – associating users with the videos they added. However, when Chad arrived at our offices, “plans had changed”. Chad was anxious to give us some good news and some bad news. The bad news was his investor/mom was again shaken by the lack of cat videos on Brushfire. She could not “in good conscience” continue to subsidize the proliferation of “videos without cats”. We explained to Chad that although we could associate users with the videos they added, thereby identifying violations of his Mom’s Terms of Service (mTOS), we could not manufacture exclusive interest in cats. He understood and added, “None of that mattered when compared to the other exciting development”.</p>

    <p class="body">Chad’s good news was the spectacular growth in traffic generated by do-it-yourself (DIY) videos on Brushfire during our hiatus. Brushfire users were adding their favorite how-to YouTube videos at a phenomenal rate. Bottom-line he said, “the market had spoken,” and he would take the last of his mom’s investment and pivot once again.</p>

    <div class="sgc3">
      <p class="sidebarc">A pivot is a change in product direction and features. Chad started this project as a way to aggregate YouTube videos. Based upon his Mom’s influence Brushfire pivoted to a cat video site. So this is Chad’s second pivot of Brushfire.</p>
    </div>

    <p class="body">Chad’s last bit of news was that he managed to obtain some new investors who don’t share his DNA.</p>

    <p class="body">In chapters 6-10 we went on a journey to achieve the design and implementation of an identity, authorization and access control system. Along the way we learned a lot about Sails. With this pivot we’re going to set out on another journey in chapters 11-15. By the end of the journey we’ll have a fully realized version of Brushfire deployed into the wild. We’ll also be exploring many more features of Sails.</p>

    <p class="body">In this chapter we’ll differentiate between pivots based upon market forces versus a lack of front-end decision-making. We will take a systematic approach to identify requirements based upon the needs of the client and how that translates to the needs of the front end and back end. We will also cover best practices for refactoring when changes are unavoidable; as well as some tricks you can use to make your applications easier to maintain.</p>

    <div class="sgc3">
      <p class="sidebarc">Code refactoring is a process where we take existing code and restructure it. This is done  for a variety of reasons including organization, readability, and an overall reduction in the complexity.</p>
    </div>

    <p class="body">Finally, we’ll explore Sails custom responses as well as build out an initial requirement of the new Brushfire—<span class="italics">user initiated password resets</span>.</p>

    <p class="body">Brushfire has an expanded number of models to support the new requirements. In chapter 12 we’ll introduce associations, which is a way of organizing and accessing multiple models. In chapter 13 we’ll take what we’ve learned and implement additional core features to Brushfire including the ability to rate content, follow users, and search and browse tutorials. In chapter 14 we’ll add <span class="italics">chat</span> to Brushfire, which will allow us to thoroughly explore WebSockets integration with Sails. Finally, in chapter 15 we  address security, testing and ultimately deploy Brushfire into the wild. We have a lot to learn, so let’s get started.</p>

    <h2 class="head" id="heading_id_3">11.1   Maintaining your sanity when requirements change</h2>

    <p class="body">The client pivot is a very common scenario. We want to distinguish, however, a pivot based upon market feedback versus a pivot based upon a lack of front-end decision-making. You know you have a pivot based upon a lack of front-end decision-making when you hear either:</p>

    <p class="listbulletcxspfirst">·   “You know after looking at this&lt;insert feature&gt; implemented, what I really want is…” This is endemic of a lack of front end wireframes that show what a feature will look like.</p>

    <p class="listbulletcxsplast">·   “I didn’t know you needed me to respond with the <span><code class="codeinitalic">username</code></span>. That’s going to take some time to change the back end to make that kind of response.”This is endemic of not using wireframes to identify requests and the requirements of those requests.</p>

    <p class="body">A <span class="italics">market-based</span> pivot involves user-driven feature changes that aren’t always predictable. A pivot based upon a lack of front-end decision-making, however, is highly predictable and preventable. What do we mean by a lack of front-end decision-making? At this point we can’t imagine implementing a back end without first examining the front end for requests and requirements of those requests. It causes us to make decisions on what and how to fulfill the back end to meet the requirements of the front end. It also causes us to examine and decide what the application will look like and how it will function before fully implementing the back end. Making these decisions is not easy because by making choices to do one thing means that we’re choosing not to do another thing. Without getting into behavioral psychology, a field we are completely unqualified to address, we’ve determined that developers (us included) like the infinite possibilities of coding. And given an opportunity will spend eternity examining each of those infinite possibilities because it’s easier to do that than make decisions. Barry Schwartz, author of <span class="italics">The Paradox of Choice</span> claims that too many options make it difficult to make any choice at all. And that’s where having a front end to guide us to make choices is so valuable. Before we can design the front end we need to get our client’s requirements. So let’s do that next.</p>

    <h3 class="head1" id="heading_id_4">11.1.1   Obtaining and revising requirements</h3>

    <p class="body">As Chad was able to calm down from his excitement, he began to explain some of the similar feature requests he received from many Brushfire users. With all due respect to Chad’s mom, no one wanted cat videos. They did ask that Brushfire be enhanced so that they could add YouTube videos around a particular subject matter they called <span class="italics">tutorials</span>. For example, one user wanted to aggregate his individual YouTube videos into a JavaScript closure tutorial. Others wanted to aggregate videos about house-training a puppy, make-up techniques, even how to distill homemade whiskey. They also wanted the ability to rate and search for tutorials as well as follow their favorite tutorial creators. Finally, they wanted to be able to leave messages about a particular video and chat in real-time if there was someone else watching the same video. As a complete aside, Chad pleaded with us to add a way for users to reset their own passwords. He said this feature alone would reduce his inbox “by at least 80%”. So how do we effectively create a plan based upon this new information?</p>

    <h3 class="head1" id="heading_id_5">11.1.2   Organizing views into five categories</h3>

    <p class="body">We’re already well-equipped to handle the pivot. In chapters three and four we started a process of examining wireframes to guide our back-end development we called <span class="italics">a front-end first approach</span>.</p>

    <div class="sgc3">
      <p class="sidebarc">We take a very broad view of wireframes. They can include anything from a mock-up to working front-end assets. Our personal choices of tools for mock-ups include combining the content of Keynote, Google Docs, and Photoshop.</p>
    </div>

    <p class="body">Based upon the pivot requirements, we’ve divided Brushfire views and their wireframes into 5 categories in table 11.1.</p>

    <p class="tablecaption pcalibre7">Table 11.1The five categories of views in Brushfire</p>

    <table cellpadding="0" cellspacing="0" class="msonormaltable" width="100%">
      <tr class="calibre3">
        <td char="23%" class="sgc223" valign="top">
          <div class="sgc6">
            <p class="tablehead">Category</p>
          </div>
        </td>

        <td char="41%" class="sgc224" valign="top">
          <div class="sgc6">
            <p class="tablehead">Description</p>
          </div>
        </td>

        <td char="34%" class="sgc225 pcalibre7" valign="top">
          <div class="sgc6">
            <p class="tablehead">Views</p>
          </div>
        </td>
      </tr>

      <tr class="calibre3">
        <td char="23%" class="sgc226" valign="top">
          <p class="tablebody2cxspfirst">Navigation Bar</p>
        </td>

        <td char="41%" class="sgc227" valign="top">
          <p class="tablebody2cxsplast">The overall top bar navigation has states which dictate how the markup is displayed.</p>
        </td>

        <td char="34%" class="sgc228 pcalibre7" valign="top">
          <p class="tablelistbulletcxspfirst pcalibre7">·   navigation.ejs</p>

          <p class="tablelistbulletcxspmiddle">·   signin.ejs</p>

          <p class="tablelistbulletcxspmiddle">·   signup.ejs</p>

          <p class="tablelistbulletcxsplast">·   signout.ejs</p>
        </td>
      </tr>

      <tr class="calibre3">
        <td char="23%" class="sgc226" valign="top">
          <p class="tablebody2cxspfirst">Search, Browse and Administration</p>
        </td>

        <td char="41%" class="sgc227" valign="top">
          <p class="tablebody2cxsplast">Brushfire includes a search view, browse view, and our existing administration view.</p>
        </td>

        <td char="34%" class="sgc228 pcalibre7" valign="top">
          <p class="tablelistbulletcxspfirst pcalibre7">·   homepage.ejs</p>

          <p class="tablelistbulletcxspmiddle">·   browse-tutorials-list.ejs</p>

          <p class="tablelistbulletcxsplast">·   administration.ejs</p>
        </td>
      </tr>

      <tr class="calibre3">
        <td char="23%" class="sgc226" valign="top">
          <p class="tablebody2cxspfirst">Profile</p>
        </td>

        <td char="41%" class="sgc227" valign="top">
          <p class="tablebody2cxsplast">The user profile takes on a new level of importance in the way users can find content created by other users.</p>
        </td>

        <td char="34%" class="sgc228 pcalibre7" valign="top">
          <p class="tablelistbulletcxspfirst pcalibre7">·   profile.ejs</p>

          <p class="tablelistbulletcxspmiddle">·   profile-followers.ejs</p>

          <p class="tablelistbulletcxspmiddle">·   profile-following.ejs</p>

          <p class="tablelistbulletcxsplast">·   edit-profile.ejs</p>
        </td>
      </tr>

      <tr class="calibre3">
        <td char="23%" class="sgc226" valign="top">
          <p class="tablebody2cxspfirst">Tutorial and Video</p>
        </td>

        <td char="41%" class="sgc227" valign="top">
          <p class="tablebody2cxsplast">Tutorials aggregate one or more videos.</p>
        </td>

        <td char="34%" class="sgc228 pcalibre7" valign="top">
          <p class="tablelistbulletcxspfirst pcalibre7">·   tutorials-detail.ejs</p>

          <p class="tablelistbulletcxspmiddle">·   tutorials-detail-new.ejs</p>

          <p class="tablelistbulletcxspmiddle">·   tutorials-detail-edit.ejs</p>

          <p class="tablelistbulletcxspmiddle">·   show-video.ejs</p>

          <p class="tablelistbulletcxspmiddle">·   tutorials-detail-video-new.ejs</p>

          <p class="tablelistbulletcxsplast">·   tutorials-detail-video-edit.ejs</p>
        </td>
      </tr>

      <tr class="calibre3">
        <td char="23%" class="sgc229" valign="top">
          <p class="tablebody2cxspfirst">Other</p>
        </td>

        <td char="41%" class="sgc230" valign="top">
          <p class="tablebody2cxsplast">A catchall for all other views.</p>
        </td>

        <td char="34%" class="sgc231" valign="top">
          <p class="tablelistbulletcxspfirst pcalibre7">·   layout.ejs</p>

          <p class="tablelistbulletcxspmiddle">·   restore-profile.ejs</p>

          <p class="tablelistbulletcxspmiddle">·   password-recovery-email.ejs</p>

          <p class="tablelistbulletcxspmiddle">·   password-recovery-email-send.ejs</p>

          <p class="tablelistbulletcxsplast">·   password-reset.ejs</p>
        </td>
      </tr>
    </table>

    <p class="body">Some of the views within each of these categories can display different content based upon the condition of the user-agent including:</p>

    <p class="listbulletcxspfirst">·   the authenticated state,</p>

    <p class="listbulletcxspmiddle">·   whether the authenticated user-agent is the designated “owner” of a tutorial or profile, or</p>

    <p class="listbulletcxsplast">·   whether the authenticated user-agent is designated as an <span><code class="codeintext">admin</code></span>.</p>

    <p class="body">So let’s take a look at some of the category’s wireframes to identify their requests, request requirements, as well as how we will  manage displaying content based on the condition of the user-agent. Although we will be reviewing only a portion of the wireframes and requirements in this chapter, you can access all of them via the chapter 11 hub here: <a class="pcalibre8 pcalibre5" href="http://sailsinaction.github.io/chapter-11/">http://sailsinaction.github.io/chapter-11/</a>.</p>

    <h3 class="head1" id="heading_id_6">11.1.3   Obtaining the example materials for this chapter</h3>

    <p class="body">Before we look at the wireframes, let’s get the assets for the remainder of the book. As we said earlier, this Pivot will encompass the remaining five chapters of Sails IN ACTION. Therefore, the repo that contains the starting assets for these remaining chapters is vast. We encourage you to take a tour of the new assets, but don’t get overwhelmed.  We will go over every inch of the project in the coming chapters. The chapter repo can be cloned directly here: <a class="pcalibre8 pcalibre5" href="https://github.com/sailsinaction/brushfire-ch11-start">https://github.com/sailsinaction/brushfire-ch11-start</a>. After cloning the repo, install the Node module dependencies via <span><code class="codeintext">npm install</code></span>.</p>

    <p class="body">We first added a <span><code class="codeintext">local.js</code></span> file in chapter 6 to hold the Google API key we were using in the <span><code class="codeintext">bootstrap.js</code></span> file to seed YouTube videos. We no longer need to seed YouTube videos and therefore don’t need to configure the API key in the <span><code class="codeintext">local.js</code></span> file.  There are, however, several configuration parameters we want to aggregate in a <span><code class="codeintext">local.js</code></span> file. In Sublime, create <span><code class="codeintext">brushfire/config/local.js</code></span> and add the following code in listing 11.1.</p>

    <p class="codelistingcaption">Listing 11.1 Adding to the local.js file</p><code class="codebcxspfirst">module.exports.blueprints = {</code> <code class="codebcxspmiddle">  shortcuts: true,</code> <code class="codebcxspmiddle">  prefix: '/bp',</code> <code class="codebcxspmiddle">};</code> <code class="codebcxspmiddle">module.exports.connections = {</code> <code class="codebcxspmiddle">  myPostgresqlServer: {    <span class="codeannotationcueballs1">❶ </span>  </code> <code class="codebcxspmiddle">adapter: 'sails-postgresql',</code> <code class="codebcxspmiddle">host: 'localhost',</code> <code class="codebcxspmiddle">    database: 'brushfire'</code> <code class="codebcxspmiddle">  }</code><code class="codebcxsplast">};</code>

    <p class="codeannotation pcalibre7"><span class="codeannotationcueballs2">❶ </span>  These settings will override any existing setting.</p>

    <div class="sgc3">
      <p class="sidebarc">If you’re using different credentials for your postgreSQL database you can simply copy the database credentials from your <span><code class="codeintext1">brushfire/config/local.js</code></span> file from your chapter 10 repo.</p>
    </div>

    <p class="body">As it turns out using <span class="italics">blueprint shortcut</span> routes to access the underlying database records can be extremely helpful. So we’ve decided to bring blueprint shortcut routes back during development. However, in order to protect any of our existing or future routes, we’ve namespaced the blueprint shortcut routes using the prefix <span><code class="codeintext">/bp</code></span>.</p>

    <div class="sgc3">
      <p class="sidebarc">Namespacing is a technique to avoid collisions of similarly named things, in this case route names. By adding a prefix <span><code class="codeintext1">/bp</code></span> we’ll avoid colliding with paths of routes with the same name.</p>
    </div>

    <p class="body">So in order to use a shortcut you’ll need to preface the URL with <span><code class="codeintext">/bp</code></span>.</p>

    <p class="body">We’ve also modified the way our models connect to PostgreSQL. Up to this point we were using PostgreSQL strictly for the <span><code class="codeintext">user</code></span> model by assigning the <span><code class="codeintext">connection</code></span> property in the <span><code class="codeintext">user</code></span> model itself. We have removed the connection from the <span><code class="codeintext">user</code></span> model and instead included it in <span><code class="codeintext">brushfire/config/model.js</code></span>. This makes the <span><code class="codeintext">myPostgresqlServer</code></span> connection the default connection for all models. If we had a requirement for a particular model to use a different connection then we could specify the connection directly in that model file so that it would override the default connection in the <span><code class="codeintext">brushfire/config/model.js</code></span>. But we don’t have that as a requirement. Let’s see this in action. Restart Sails via <span><code class="codeintext">sails lift</code></span> and navigate your browser to <i>localhost:1337/bp/user/find</i>. You should see the two user accounts that are created using the <span><code class="codeintext">bootstrap.js</code></span> file.</p>

    <h3 class="head1" id="heading_id_7">11.1.4   Refactoring navigation</h3>

    <p class="body">We now have a requirement to incorporate Tutorials into Brushfire. We also have a requirement to allow all users to access user profiles. Finally, we have a requirement to add stand-alone signup and signin pages. These requirements make new demands of the navigation view to display different markup based upon the condition of the user agent as illustrated in figure 11.1.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/11_01.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 11.1 The navigation markup has five basic states based upon the conditions of the user-agent including <span class="codeannotationcueballs">① </span>  unauthenticated, <span class="codeannotationcueballs">② </span>  authenticated with the add tutorial button displayed, <span class="codeannotationcueballs">③ </span>  authenticated with the add tutorial button displayed, <span class="codeannotationcueballs">④ </span>  authenticated and an admin, <span class="codeannotationcueballs">⑤ </span>  authenticated and an admin with the add tutorial button displayed.</p>

    <p class="body">The display of the administration link will remain unchanged. What has changed is the way in which <span class="italics">sign up</span> and <span class="italics">sign in</span> now function. Based upon Chad’s requirements we’ve created two new wireframes that coincide with stand-alone views for the <span class="italics">sign in</span> and <span class="italics">sign up</span> pages. Links to each page are now on the navigation bar when the user-agent is unauthenticated as depicted in figure 11.2.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/11_02.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 11.2  Sign in and sign up now have stand-alone views.</p>

    <p class="body">When the user-agent is authenticated we’ve added a drop down to navigate to the user profile or to logout as illustrated in figure 11.3.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/11_03.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 11.3  The navigation bar adds a drop down when the user-agent is authenticated to allow access to the user profile and the ability to logout.</p>

    <p class="body">We’ve also added a <span><code class="codeintext">brushfire/views/logout.ejs</code></span> view that we’ll use later to provide functionality if a <span><code class="codeintext">GET</code></span> request to <span><code class="codeintext">/logout</code></span> is made. These changes to the assets are reflected in the front-end markup you cloned earlier. You’ll also see a new button on the navigation bar named <span class="italics">add tutorial</span>. A user must be authenticated to add a tutorial. There are situations, where we don’t want an authenticated user-agent to be able to add a tutorial. For example, if a user is edits a tutorial, then we want to hide the display of <span class="italics">add tutorial</span> button from the navigation bar. Therefore we added some logic to the partial view <span><code class="codeintext">brushfire/views/navigation.ejs</code></span> to handle a new local property – <span><code class="codeintext">showAddTutorialButton</code></span> shown in listing 11.2.</p>

    <p class="codelistingcaption">Listing 11.2 Handling the display of the <span class="italics1">add tutorial</span> button in the navigation bar</p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">&lt;% if (me) { %&gt;    <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">&lt;ul class="nav navbar-nav navbar-right"&gt;</code> <code class="codebcxspmiddle">&lt;% if (typeof showAddTutorialButton !== 'undefined' &amp;&amp; showAddTutorialButton) { %&gt;  <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle">&lt;li style="margin-right:5px"&gt;&lt;p class="navbar-btn"&gt;&lt;a type="button" class="btn btn-primary" href="/tutorials/new"&gt;add tutorial&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;</code> <code class="codebcxspmiddle">&lt;% } %&gt;</code><code class="codebcxsplast">...</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶ </span>  First check if the user-agent is authenticated</p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❷ </span>  W ewill make sure <span><code class="codeintext1">showAddTutorialButton</code></span> property is defined and then if <span><code class="codeintext1">true</code></span> display it</p>

    <p class="body">By checking whether the property is defined via the <span><code class="codeintext">typeof</code></span> operator, we have the option of passing it via a <span><code class="codeintext">local</code></span> or not. If we don’t pass the <span><code class="codeintext">local, then</code></span> the button will not be displayed. Listing 11.3 shows how we changed the home action to also pass a value for <span><code class="codeintext">showAddTutorialButton</code></span> so that it’s displayed when the home page is rendered.</p>

    <p class="codelistingcaption">Listing 11.3 Passing the <span class="italics1">showAddTutorialButton</span> property via a local in the view</p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">return res.view('homepage', {</code> <code class="codebcxspmiddle">me: {</code> <code class="codebcxspmiddle">    username: user.username,</code> <code class="codebcxspmiddle">    gravatarURL: user.gravatarURL,</code> <code class="codebcxspmiddle">    admin: user.admin</code> <code class="codebcxspmiddle">  },</code> <code class="codebcxspmiddle">showAddTutorialButton: true   <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">});</code><code class="codebcxsplast">...</code>

    <p class="codeannotation pcalibre7"><span class="codeannotationcueballs2">❶ </span>  setting the <span><code class="codeintext1">showAddTutorialButton</code></span> property to display the button.</p>

    <p class="body">We have documented all of the request and request requirements for Brushfire in an online <span class="italics">API reference</span> that can be found at:</p>

    <p class="tablebody"><a class="pcalibre8 pcalibre5" href="https://docs.google.com/spreadsheets/d/1vh2gpwQrnW3Y8PZBie4oHtsL4TfpcPMWwIy9r86vH0/edit?usp=sharing">https://docs.google.com/spreadsheets/d/1vh2gpwQrnW3Y8PZBie4oHtsL4TfpcPMWwIy9r86vH0/edit?usp=sharing</a></p>

    <p class="body">Navigate your browser to that link and let’s look at the requirements for the <span class="italics">Signup form</span> similar to the display in figure 11.4.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/11_04.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 11.4  The API reference documents each request’s <span class="codeannotationcueballs">① </span>  friendly name, <span class="codeannotationcueballs">② </span>  description, <span class="codeannotationcueballs">③ </span>  incoming parameters (if any), <span class="codeannotationcueballs">④ </span>  view (if any), <span class="codeannotationcueballs">⑤ </span>  locals, <span class="codeannotationcueballs">⑥ </span>  method and URL path, <span class="codeannotationcueballs">⑦ </span>  controller and action, <span class="codeannotationcueballs">⑧ </span>  response type, and <span class="codeannotationcueballs">⑨ </span>  front-end controller (if any).</p>

    <p class="body">The Brushfire API reference contains the inputs and exits of each request shown in the wireframes similar to figure 11.5.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/11_05.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 11.5  The wireframes contain documentation for the <span class="codeannotationcueballs">① </span>  attributes and <span class="codeannotationcueballs">② </span>  requests of each view.</p>

    <p class="body">We used the wireframes for each view to create the API reference documentation and the documentation to create a working front end with partially implemented endpoints. We say “partially implemented” because we won’t integrate actions using “real” data until chapter 12. For now, we will  simulate records using arrays of dictionaries for lists and individual dictionaries for particular records. Speaking of models, the pivot will involve the use of a feature of Waterline we haven’t covered yet – <span class="italics">associations</span>. We’ll explain associations in detail in chapters 12 and 13. For now, know that associations will provide some very helpful functionality to manage the relationships between related models—<span><code class="codeintext">users,</code></span> <span><code class="codeintext">tutorials</code></span>, <span><code class="codeintext">videos</code></span> and <span><code class="codeintext">ratings</code></span>. You may have noticed that the API reference documentation for the <span class="italics">Login</span> request also contains a responses section as shown in figure 11.6.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/11_06.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 11.6  The <span class="italics1">login</span> request has three different response codes <span class="codeannotationcueballs">① </span>  if the user-agent is deleted, <span class="codeannotationcueballs">② </span>  banned or <span class="codeannotationcueballs">③ </span>  successful.</p>

    <p class="body">This is where we can document requests that have different responses based upon different response status codes. Next, let’s take a look at the search, browse, and administration views.</p>

    <h3 class="head1" id="heading_id_8">11.1.5   Refactoring views</h3>

    <p class="body">Users want the ability to search and browse for the tutorials created within Brushfire. So we have transformed the homepage into a search page shown in figure 11.7.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/11_07.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 11.7  The post-pivot homepage search form.</p>

    <p class="body">We will implement <span class="italics">search</span> in chapter 13 where we’ll use the homepage form to capture <span><code class="codeintext">searchCriteria</code></span> to use as criteria for a query of the <span><code class="codeintext">tutorial</code></span> model. It is important to note that the content of the homepage does not change based upon the condition of the user agent. For example, the homepage does not change whether the user agent is authenticated or not. We also have a requirement that users have the ability to browse tutorials. We  created a wireframe for the Browse tutorial page shown in figure 11.8.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/11_08.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 11.8  The browse tutorials page.</p>

    <p class="body">Like the homepage, the browse <span class="italics">tutorials</span> page does not display different content based upon the condition of the user agent. Finally, we created a wireframe for the administration page in figure 11.9, however, the functionality of this page has not changed from previous earlier versions of Brushfire.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/11_09.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 11.9   The administration page.</p>

    <p class="body">Now let’s move to the profile category of views.</p>

    <h2 class="head" id="heading_id_9">11.2   Custom routing and error pages</h2>

    <p class="body">Before the pivot, a profile could only be viewed if the user was authenticated in Brushfire. We used the <span><code class="codeintext">req.session.userID</code></span> as criteria for a query of the user model to find the user record with the <span><code class="codeintext">email</code></span>, <span><code class="codeintext">gravatarURL</code></span> and <span><code class="codeintext">admin</code></span> attributes to display the profile. Since we were using the <span><code class="codeintext">req.session.userId</code></span> property to determine which profile to display, only the profile of the authenticated user could be displayed. Chad’s new requirements provide for a profile that can be viewed with or without authentication including users other than the profile owner. This will enable Brushfire users to explore tutorials created by other Brushfire users via their profile page. Brushfire users also want the ability to follow users they like as well as other followers of the user. The profile page will therefore be expanded to three different views:</p>

    <p class="listbulletcxspfirst">·   a profile with tutorials view,</p>

    <p class="listbulletcxspmiddle">·   a profile with followers view, and</p>

    <p class="listbulletcxsplast">·   a profile with those being followed view.</p>

    <p class="body">Let’s take a look at each view and its requests and request requirements. The first view is the <span class="italics">profile page</span> shown in figure 11.10.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/11_10.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 11.10   The profile page with tutorials.</p>

    <p class="body">The second view is the <span class="italics">Profile following page</span> shown in figure 11.11.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/11_11.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 11.11   The profile page with users followed.</p>

    <p class="body">The final view is Profile followers page shown in figure 11.12.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/11_12.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 11.12  The profile page with users following.</p>

    <p class="body">The profile link on the navigation bar now displays the <span><code class="codeintext">username</code></span> related to the current session’s <span><code class="codeintext">userId</code></span> property instead of the <span><code class="codeintext">email</code></span> address. We did this for both privacy and continuity, since the path of the route that links to the profile in the navigation bar now uses <span><code class="codeintext">/:username</code></span>. We will discuss the impact of using a variable also referred to as a <span class="italics">slug</span> in the next section.</p>

    <div class="sgc3">
      <p class="sidebarc">A <span class="italics1">slug</span> is shorthand for a generated URL that distinguishes between endpoints using a string.</p>
    </div>

    <p class="body">Open <span><code class="codeintext">brushfire/api/controllers/PageController.js</code></span>, in Sublime and let’s see how we distinguish between profile owners in the <span><code class="codeintext">profile</code></span> action similar to listing 11.4.</p>

    <p class="codelistingcaption">Listing 11.4  The <span class="italics1">profile</span> action of the <span class="italics1">page</span> controller</p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">var me = {    <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">  email: loggedInUser.email,</code> <code class="codebcxspmiddle">  username: loggedInUser.username,</code> <code class="codebcxspmiddle">  gravatarURL: loggedInUser.gravatarURL,</code> <code class="codebcxspmiddle">  admin: loggedInUser.admin</code> <code class="codebcxspmiddle">};</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">   if (req.session.userId === foundByUsername.id) {</code> <code class="codebcxspmiddle">  me.isMe = true;    <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle">}</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">return res.view('profile', {     <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle">  me: me,</code> <code class="codebcxspmiddle">  showAddTutorialButton: true,</code> <code class="codebcxspmiddle">  username: foundByUsername.username,</code> <code class="codebcxspmiddle">  gravatarURL: foundByUsername.gravatarURL,</code> <code class="codebcxspmiddle">  tutorials: tutorials</code> <code class="codebcxspmiddle">});</code><code class="codebcxsplast">...</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶ </span>  Build up a dictionary of information about the user and assign it to <span><code class="codeintext1">me.</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❷ </span>  <span><code class="codeintext1">isMe</code></span> is true if the <span><code class="codeintext1">userId</code></span> of the current session is equal to the <span><code class="codeintext1">foundByUsernameid.</code></span></p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❸ </span>  Pass the locals to the <span><code class="codeintext1">profile</code></span> view.</p>

    <p class="body">So we’ll either pass the <span><code class="codeintext">isMe</code></span> property set to <span><code class="codeintext">true</code></span> to the <span><code class="codeintext">me</code></span> dictionary, which will enable the user-agent to modify the profile, or we will pass the locals without it allowing the user to view, but not modify the profile.</p>

    <h3 class="head1" id="heading_id_10">11.2.1   The impact of <span><code class="codeintext1">:variables</code></span> in routes</h3>

    <p class="body">The new profile route and specifically the path <span><code class="codeintext">/:username</code></span> also referred to as a <span><code class="codeintext">slug</code></span>, presents an opportunity to address some issues related to the use of variables in a route’s path. In Sublime open <span><code class="codeintext">brushfire/config/routes.js</code></span> similar to listing 11.5.</p>

    <p class="codelistingcaption">Listing 11.5  The explicit routes of Brushfire</p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle"> /*************************************************************</code> <code class="codebcxspmiddle">  * JSON API Endpoints                                        *</code> <code class="codebcxspmiddle">  *************************************************************/</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">  'PUT /login': 'UserController.login',</code> <code class="codebcxspmiddle">  'POST /logout': 'UserController.logout',</code> <code class="codebcxspmiddle">  'GET /logout': 'PageController.logout',</code> <code class="codebcxspmiddle">  ...</code> <code class="codebcxspmiddle">  /*************************************************************</code> <code class="codebcxspmiddle">  * Server Rendered HTML Page Endpoints                        *</code> <code class="codebcxspmiddle">  *************************************************************/</code> <code class="codebcxspmiddle">  ...</code> <code class="codebcxspmiddle">'GET /:username': 'PageController.profile'</code><code class="codebcxsplast">}</code>

    <p class="body">Before we discuss the impact of using <span><code class="codeintext">/:username</code></span>, let’s look at some overall organization changes we’ve made to <span><code class="codeintext">brushfire/config/routes.js</code></span>. We have aggregated the explicit routes into two general groups – JSON API Endpoints and Server Rendered HTML Page Endpoints. For added organization we’ve also associated related resources together within each of these groups. For example, routes related to the <span><code class="codeintext">user</code></span> resource are placed together. But what is the impact of the order of routes?</p>

    <p class="body">From previous chapters we know that the routes contained in <span><code class="codeintext">brushfire/config/routes.js</code></span> are considered explicit or custom routes. The Sails router looks to match an incoming request to explicit routes before trying to match the request to the other types of Sails routes like Blueprint routes, Asset routes, and the <span><code class="codeintext">/csrfToken</code></span> route. Routes are matched by the Sails router in the order in which they are placed in the <span><code class="codeintext">brushfire/config/routes.js</code></span> file. If a variable like <span><code class="codeintext">:username</code></span> is not specified in the path of a route, then the order chosen for routes can be purely based on your organizational aesthetic. However, if you include a variable like <span><code class="codeintext">:username</code></span> in your path, the order becomes important.</p>

    <p class="body">For example, the path <span><code class="codeintext">/:username</code></span> will be triggered on any combination of characters after the initial <span class="italics">slash</span> “<span class="italics">/</span>”<span class="italics">.</span> Therefore, any routes after <span><code class="codeintext">/:username</code></span> whose path contains a single segment will never be triggered.</p>

    <div class="sgc3">
      <p class="sidebarc">A segment consists of a <span class="italics1">slash</span> “<span class="italics1">/</span>” and one or more alphanumeric characters. For example, the following path contains two segments <span><code class="codeintext1">/tutorials/:id</code></span>.</p>
    </div>

    <p class="body">When using variables in a route’s path to place the route with the variable below any other routes with the same number of segments. Figure 11.13 illustrates how this works.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/11_13.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 11.13 Example <span class="codeannotationcueballs">① </span>  illustrates the impact of the route order to other single segment routes when using the <span><code class="codeintext1">:username</code></span> variable. In the first example, a <span><code class="codeintext1">GET</code></span> request to <span><code class="codeintext1">/logout</code></span> would be matched with the <span><code class="codeintext1">GET/:username</code></span> route which is not the intended result. In example <span class="codeannotationcueballs">② </span>  we placed the <span><code class="codeintext1">GET/:username</code></span> route below the route to <span><code class="codeintext1">GET/logout</code></span> route. The <span><code class="codeintext1">GET</code></span> request to <span><code class="codeintext1">/logout</code></span> was matched with route that contained the <span><code class="codeintext1">GET/logout</code></span> path which is what was intended. Note that the two segment route to <span><code class="codeintext1">GET/profile/edit</code></span> was unaffected.</p>

    <p class="body">If we don’t place routes with the same number of segments below the route with a variable like <span><code class="codeintext">:username</code></span>, those routes will never be matched by the Sails router. There’s one other issue with <span><code class="codeintext">/:username</code></span>. Start Sails via <span><code class="codeintext">sails lift</code></span> and navigate your browser to <span class="italics">localhost:1337/favicon.ico</span>. Open up the browser’s console window and you should see that Sails responded with a <span><code class="codeintext">404 (Not found)</code></span>status.</p>

    <div class="sgc3">
      <p class="sidebarc">You get bonus points if you also recognized that the Sails 404 response page wasn’t rendered. We’ll deal with that issue in the next section.</p>
    </div>

    <p class="body">Sails provides a <span><code class="codeintext">favicon.ico</code></span> file in the root of <span><code class="codeintext">brushfire/assets/</code></span>folder. As we learned in chapter 3, the assets folder performs like the <span class="italics">web</span> <span class="italics">root</span> of a web server. Any file in that folder automatically has a built-in asset route. If the file has a recognized type it will be rendered by the browser. So navigating to <span class="italics">localhost:1337/favicon.ico</span> should result in the browser rendering the <span><code class="codeintext">favicon.ico</code></span> file. The issue is that <span class="italics">localhost:1337/favicon.ico</span> is being superseded by <span><code class="codeintext">/:username</code></span>. We can easily fix this by using the <span><code class="codeintext">skipAssets</code></span> property in the routes configuration. Head back to Sublime and open <span><code class="codeintext">brushfire/config/routes.js</code></span> and make the following changes to <span><code class="codeintext">/:username</code></span> in listing 11.6.</p>

    <p class="codelistingcaption">Listing 11.6 Adding the <span><code class="codeintext1">skipAssets</code></span> <span class="italics1">property</span> to a route</p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">'GET /:username': {</code> <code class="codebcxspmiddle">    controller: 'PageController',</code> <code class="codebcxspmiddle">    action: 'profile',</code> <code class="codebcxspmiddle">    skipAssets: true   <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">  },</code><code class="codebcxsplast">...</code>

    <p class="codeannotation pcalibre7"><span class="codeannotationcueballs2">❶ </span>  Any files in the root of <span><code class="codeintext1">brushfire/assets</code></span> will not be superseded by this route.</p>

    <p class="body">By adding the <span><code class="codeintext">skipAssets</code></span> property to the route configuration, any file in the root of <span><code class="codeintext">brushfire/assets</code></span> will no longer be superseded by <span><code class="codeintext">/:username</code></span>. Restart Sails using <span><code class="codeintext">sails lift</code></span> <span class="italics">and navigate your browser to localhost:1337/favicon.ico</span>. You should now see the Sails favicon displayed. But why wasn’t the Sails 404 response page displayed earlier when the <span><code class="codeintext">favicon.ico</code></span> file could not be found?  We’ll fix that in the next section.</p>

    <h3 class="head1" id="heading_id_11">11.2.2   Customizing Sails built-in response pages</h3>

    <p class="body">Earlier the Sails 404 response page wasn’t displayed when we made a GET request to localhost:1337/favicon.ico. The reason the page didn’t get displayed was because the <span><code class="codeintext">me</code></span> dictionary wasn’t sent as a <span><code class="codeintext">local</code></span> to the view. When the <span><code class="codeintext">404</code></span>page was rendered, the <span><code class="codeintext">layout</code></span> file added the navigation markup in <span><code class="codeintext">brushfire/views/partials/navigation.ejs.</code></span> That navigation view attempted to use a property named <span><code class="codeintext">me</code></span> and because it didn’t exist, an error was generated. But where did this error come from? It comes from the <span><code class="codeintext">notFound.js</code></span> response. Let’s back up for a moment. Sails provides a convenient way of handling common response types like <span class="italics">bad request</span> (<span><code class="codeintext">400</code></span>), <span class="italics">forbidden</span> (<span><code class="codeintext">403</code></span>), and <span class="italics">not found</span> (<span><code class="codeintext">404</code></span>) with custom code for each response-- <span><code class="codeintext">badRequest.js</code></span>, <span><code class="codeintext">forbidden.js</code></span>, <span><code class="codeintext">notFound.js</code></span>, etc. The source code for these responses can be found in the <span><code class="codeintext">brushfire/api/responses/</code></span>folder<span class="italics">.</span> Some of the responses also have corresponding views that are sent as the response if the requesting user-agent doesn’t require JSON.</p>

    <div class="sgc3">
      <p class="sidebarc">Each response tries to guess whether the user-agent require’s JSON. For example if the request is an AJAX request we can assume that the request wants JSON.</p>
    </div>

    <p class="body">For example <span><code class="codeintext">forbidden.js</code></span> uses <span><code class="codeintext">brushfire/views/403.ejs</code></span><span class="italics">,</span><span><code class="codeintext">notFound.js</code></span> uses <span><code class="codeintext">brushfire/views/404.ejs</code></span>, and<span><code class="codeintext">serverError.js</code></span> uses <span><code class="codeintext">brushfire/views/500.ejs</code></span>. In our current situation, the code that renders the <span><code class="codeintext">not found</code></span> response in the <span><code class="codeintext">404.ejs</code></span> view is in <span><code class="codeintext">brushfire/api/responses/notFound.js</code></span>. Let’s again take a look at the 404 response generated, but this time using a different example.</p>

    <p class="body">Restart Sails using <span><code class="codeintext">sails lift</code></span> and navigate your browser to <span class="italics">localhost:1337/irlIsOld</span>. The Sails router matches a <span><code class="codeintext">GET</code></span> request to <span><code class="codeintext">/irlIsOld</code></span> with the route containing the path <span><code class="codeintext">GET/:username</code></span> and executes the <span><code class="codeintext">profile</code></span> action of the <span><code class="codeintext">page</code></span> controller. The resulting <span><code class="codeintext">404</code></span>error in the terminal window should look similar to listing 11.7.</p>

    <p class="codelistingcaption">Listing 11.7  A <span><code class="codeintext1">404</code></span>error  related to the <span><code class="codeintext1">404.ejs</code></span> response</p><code class="codebcxspfirst">warn: res.notFound() :: When attempting to render error page view, an error occured (sending JSON instead). Details:  ReferenceError: /brushfire/views/layout.ejs:36</code> <code class="codebcxspmiddle">    34|   &lt;/head&gt;</code> <code class="codebcxspmiddle">    35|   &lt;body ng-app="brushfire"&gt;</code> <code class="codebcxspmiddle">&gt;&gt; 36|     &lt;%- partial('./partials/navigation.ejs') %&gt;</code> <code class="codebcxspmiddle">    37|     &lt;%- body %&gt;</code> <code class="codebcxspmiddle">    38|</code> <code class="codebcxspmiddle">    39|     &lt;!--TEMPLATES--&gt;</code> <code class="codebcxspmiddle">/brushfire/views/partials/navigation.ejs:21</code> <code class="codebcxspmiddle">    40|       &lt;ul class="nav navbar-nav"&gt;</code> <code class="codebcxspmiddle">    41|         &lt;li&gt;&lt;a style="font-family:verdana;font-size: 18px;" href="/tutorials/browse"&gt;browse&lt;/a&gt;&lt;/li&gt;</code> <code class="codebcxspmiddle">&gt;&gt; 42|         &lt;% if (me &amp;&amp; me.admin) { %&gt;</code><code class="codebcxsplast">me is not defined</code>

    <p class="body">So it looks like the <span><code class="codeintext">brushfire/views/partials/navigation.ejs</code></span> view was looking for a <span><code class="codeintext">melocal</code></span> that doesn’t exist. We can confirm that no <span><code class="codeintext">locals</code></span> were sent by looking at the <span><code class="codeintext">profile</code></span> action of the <span><code class="codeintext">page</code></span> controller that’s executing the <span><code class="codeintext">res.notFound()</code></span>response<span class="italics">.</span> In Sublime, open <span><code class="codeintext">brushfire/api/controllers/PageController.js</code></span> and locate <span><code class="codeintext">return res.notFound();</code></span> in the <span><code class="codeintext">profile</code></span> action in listing 11.8.</p>

    <p class="codelistingcaption">Listing 11.8  The notFound response of the profile action</p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">User.findOne({</code> <code class="codebcxspmiddle">  username: req.param('username')</code> <code class="codebcxspmiddle">    }).exec(function(err, foundByUsername) {</code> <code class="codebcxspmiddle">      if (err) {</code> <code class="codebcxspmiddle">        return res.negotiate(err);</code> <code class="codebcxspmiddle">      }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle"> if (!foundByUsername) {   </code> <code class="codebcxspmiddle">         return res.notFound();<span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">      }</code><code class="codebcxsplast">...</code>

    <p class="codeannotation pcalibre7"><span class="codeannotationcueballs2">❶ </span>  if the <span><code class="codeintext1">user</code></span> isn’t found respond with <span><code class="codeintext1">notFound()</code></span>.</p>

    <p class="body">After the <span><code class="codeintext">GET</code></span> request to <span><code class="codeintext">/irlIsOld</code></span> is made the <span><code class="codeintext">:username</code></span> parameter—<span><code class="codeintext">irlIsOld</code></span> is used as criteria by a <span><code class="codeintext">User.findOne()</code></span> model method in the <span><code class="codeintext">profile</code></span> action to find a <span><code class="codeintext">user</code></span>. There is no <span><code class="codeintext">user</code></span> record with <span><code class="codeintext">irlIsOld</code></span> as a username so <span><code class="codeintext">brushfire/api/responses/notFound.js</code></span> is executed via <span><code class="codeintext">return res.notFound()</code></span>. Let’s see what happens when <span><code class="codeintext">res.notFound()</code></span>is executed as illustrated in figure 11.14.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/11_14.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 11.14. The <span><code class="codeintext1">notFound.js</code></span> response.</p>

    <p class="body">The <span><code class="codeintext">notFound.js</code></span> response method expects <span class="codeannotationcueballs">① </span>  locals as the first argument and <span class="codeannotationcueballs">② </span>  a view as the second argument. In this case we didn’t pass any locals or a view. The code in <span class="codeannotationcueballs">③ </span>  logs errors and prevents locals from being sent if we’re in a production environment and can be ignored for now. If <span class="codeannotationcueballs">④  </span> we were making an AJAX request, the response would return early passing any locals as JSON. We’re not making an AJAX request in this case. If a second argument was passed as a view, <span class="codeannotationcueballs">⑤ </span>  the response will check if the argument is a string. If it is we will attempt to add a <span><code class="codeintext">view</code></span> property to the <span><code class="codeintext">options</code></span> dictionary and assign its value to the new <span><code class="codeintext">options.view</code></span> property. Once again, we didn’t pass in any view to the response. Here’s the important part - <span class="codeannotationcueballs">⑥ </span>  the response will try to render the default view--<span><code class="codeintext">404</code></span> with any locals sent as the first argument. The response will <span class="codeannotationcueballs">⑦ </span>  handle any errors, and then <span class="codeannotationcueballs">⑧ </span>  render the view. So when the <span><code class="codeintext">404.ejs</code></span> view is rendered it tries to render <span><code class="codeintext">brushfire/views/partials/navigation.ejs</code></span> because it is part of the layout.ejs view which expects a <span><code class="codeintext">me</code></span> property that doesn’t exist and we get an error. To resolve this, we could pass <span><code class="codeintext">me</code></span> as an argument to <span><code class="codeintext">notFound({me: null})</code></span>, but locals would now have the signature <span><code class="codeintext">data.me</code></span> instead of what the view is expecting-- <span><code class="codeintext">me</code></span>. This also would not handle our authenticated state. Our best solution is to alter <span><code class="codeintext">notFound.js</code></span> to take a detour before it renders the view. We’ll check whether the user-agent is authenticated via <span><code class="codeintext">req.session.userId</code></span>. If the user-agent isn’t authenticated we’ll pass a <span><code class="codeintext">me</code></span> dictionary that’s <span><code class="codeintext">null</code></span>. If the user-agent is authenticated, we will find that <span><code class="codeintext">user</code></span> and pass a <span><code class="codeintext">me</code></span> dictionary that contains the found <span><code class="codeintext">email</code></span>, <span><code class="codeintext">username</code></span>, <span><code class="codeintext">gravatarURL</code></span>, and <span><code class="codeintext">admin</code></span> properties. Making these changes to the response will also provide an opportunity to demonstrate how to incorporate asynchronous detours in existing source code.</p>

    <p class="body">Our first option is to copy all of the existing response code for both cases – the unauthenticated state and the authenticated state. This would result in duplicative code and a rather inelegant solution. If you’d like to see the source code for this solution in all its ugliness, check out the gist at <a class="pcalibre8 pcalibre5" href="https://gist.github.com/sailsinaction/a3c3b5db96dabfaf6ec6a57c388141ea">https://gist.github.com/sailsinaction/a3c3b5db96dabfaf6ec6a57c388141ea</a>. A second approach found in listing 11.9, isn’t perfect, but it allows us to take our detour without adding duplicative code.</p>

    <p class="codelistingcaption">Listing 11.9  Creating an asynchronous detour in the <span class="italics1">notFound</span> response</p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">  options = (typeof options === 'string') ? { view: options } : options ||  {};</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">  function afterwards(err,loggedInUser){   <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">    if (err) { return res.serverError(err); }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    var me;</code> <code class="codebcxspmiddle">    if (!loggedInUser) {</code> <code class="codebcxspmiddle">      me = null;   <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle">    }</code> <code class="codebcxspmiddle">    else {</code> <code class="codebcxspmiddle">      me = {   <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle">        email: loggedInUser.email,</code> <code class="codebcxspmiddle">        gravatarURL: loggedInUser.gravatarURL,</code> <code class="codebcxspmiddle">        username: loggedInUser.username,</code> <code class="codebcxspmiddle">        admin: loggedInUser.admin</code> <code class="codebcxspmiddle">      };</code> <code class="codebcxspmiddle">    }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    var locals = {   <span class="codeannotationcueballs1">❹ </span></code> <code class="codebcxspmiddle">      data: data,</code> <code class="codebcxspmiddle">      me: me</code> <code class="codebcxspmiddle">    };</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    if (options.view) {</code> <code class="codebcxspmiddle">      return res.view(options.view, locals);   <span class="codeannotationcueballs1">❺ </span></code> <code class="codebcxspmiddle">    }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    else return res.view('404', locals, function (err, html) {   <span class="codeannotationcueballs1">❻ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      if (err) {</code> <code class="codebcxspmiddle">        if (err.code === 'E_VIEW_FAILED') {</code> <code class="codebcxspmiddle">          sails.log.verbose('res.notFound() :: Could not locate view for error page (sending JSON instead). Details: ',err);</code> <code class="codebcxspmiddle">        }</code> <code class="codebcxspmiddle">        else {</code> <code class="codebcxspmiddle">          sails.log.warn('res.notFound() :: When attempting to render error page view, an error occured (sending JSON instead). Details: ', err);</code> <code class="codebcxspmiddle">        }</code> <code class="codebcxspmiddle">        return res.jsonx(data);</code> <code class="codebcxspmiddle">      }</code> <code class="codebcxspmiddle">      return res.send(html);</code> <code class="codebcxspmiddle">    });</code> <code class="codebcxspmiddle">  }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">  if (!req.session.userId) {   <span class="codeannotationcueballs1">❼ </span></code> <code class="codebcxspmiddle">    return afterwards();</code> <code class="codebcxspmiddle">  }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">  User.findOne({ id: req.session.userId }).exec(function(err,user){   <span class="codeannotationcueballs1">❽ </span></code> <code class="codebcxspmiddle">    if (err) return afterwards(err);</code> <code class="codebcxspmiddle">    return afterwards(null, user);</code> <code class="codebcxspmiddle">  });</code><code class="codebcxsplast">};</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶ </span>  Declare a function that will be executed after we determine the user-agent’s authenticated state.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❷ </span>  If no <span><code class="codeintext1">loggedInUser</code></span>, assign <span><code class="codeintext1">me</code></span> to <span><code class="codeintext1">null.</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❸ </span>  If <span><code class="codeintext1">loggedInUser</code></span> exists, assign the necessary properties for the navigation bar to <span><code class="codeintext1">me.</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❹ </span>  Declare a <span><code class="codeintext1">locals</code></span> dictionary with the legacy <span><code class="codeintext1">data</code></span> dictionary and the new <span><code class="codeintext1">me</code></span> dictionary.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❺ </span>  If a view is specified as an argument render it with the <span><code class="codeintext1">locals</code></span> dictionary.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❻ </span>  If no view is specified render<span><code class="codeintext1">404.ejs</code></span> with the <span><code class="codeintext1">locals</code></span> dictionary.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❼ </span>  If no session exists, execute <span><code class="codeintext1">afterwards().</code></span></p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❽ </span>  Lookup session’s <span><code class="codeintext1">userId</code></span> property in the <span><code class="codeintext1">user</code></span> model and return the result to <span><code class="codeintext1">afterwards().</code></span></p>

    <p class="body">We have moved the actual rendering of the 404.ejs view into a function named <span><code class="codeintext">afterwards(err,loggedInUser)</code></span>.  The <span><code class="codeintext">User.findOne()</code></span> model method will execute first then our <span><code class="codeintext">afterwards</code></span> method will execute <span class="italics">passing</span> in the results of our <span><code class="codeintext">User.findOne()</code></span> query. This isn’t a bad option, however, we think we can do even better.</p>

    <p class="body">This last approach in listing 11.10 may look strange at first but we promise that after you’ve gone through it a few times you will be transformed into an asynchronous virtuoso.</p>

    <p class="codelistingcaption">Listing 11.10 Using an asynchronous IIFE detour in the <span><code class="codeintext1">notFound</code></span>  response</p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">    options = (typeof options === 'string') ? { view: options } : options || {};</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">  (function ifThenFinally (cb){  <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">    if (!req.session.userId) {   <span class="codeannotationcueballs1">❷  </span></code> <code class="codebcxspmiddle">      return cb();</code> <code class="codebcxspmiddle">    }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    User.findOne({ id: req.session.userId }).exec(function(err,user){  <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle">      if (err) return cb(err);</code> <code class="codebcxspmiddle">      return cb(null, user);</code> <code class="codebcxspmiddle">    });</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">  })(function afterwards(err,loggedInUser){    <span class="codeannotationcueballs1">❹ </span></code> <code class="codebcxspmiddle">    if (err) { return res.serverError(err); }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    var me;  </code> <code class="codebcxspmiddle">    if (!loggedInUser) {</code> <code class="codebcxspmiddle">      me = null;</code> <code class="codebcxspmiddle">    }</code> <code class="codebcxspmiddle">    else {</code> <code class="codebcxspmiddle">      me = {</code> <code class="codebcxspmiddle">        email: loggedInUser.email,</code> <code class="codebcxspmiddle">        gravatarURL: loggedInUser.gravatarURL,</code> <code class="codebcxspmiddle">        username: loggedInUser.username,</code> <code class="codebcxspmiddle">        admin: loggedInUser.admin</code> <code class="codebcxspmiddle">      };</code> <code class="codebcxspmiddle">    }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    var locals = {</code> <code class="codebcxspmiddle">      data: data,</code> <code class="codebcxspmiddle">      me: me</code> <code class="codebcxspmiddle">    };</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    if (options.view) {</code> <code class="codebcxspmiddle">      return res.view(options.view, locals);</code> <code class="codebcxspmiddle">    }</code> <code class="codebcxspmiddle">    else return res.view('404', locals, function (err, html) {</code> <code class="codebcxspmiddle">      if (err) {</code> <code class="codebcxspmiddle">        if (err.code === 'E_VIEW_FAILED') {</code> <code class="codebcxspmiddle">          sails.log.verbose('res.notFound() :: Could not locate view for error page (sending JSON instead). Details: ',err);</code> <code class="codebcxspmiddle">        }</code> <code class="codebcxspmiddle">        else {</code> <code class="codebcxspmiddle">          sails.log.warn('res.notFound() :: When attempting to render error page view, an error occured (sending JSON instead). Details: ', err);</code> <code class="codebcxspmiddle">        }</code> <code class="codebcxspmiddle">        return res.jsonx(data);</code> <code class="codebcxspmiddle">      }</code> <code class="codebcxspmiddle">      return res.send(html);</code> <code class="codebcxspmiddle">    });</code> <code class="codebcxspmiddle">  });</code><code class="codebcxsplast">};</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶ </span>  Declare the IIFE</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❷ </span>  If no session exists, execute the callback <span><code class="codeintext1">afterwards().</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❸ </span>  Lookup session’s <span><code class="codeintext1">userId</code></span> property in the <span><code class="codeintext1">user</code></span> model and return the result to the callback named <span><code class="codeintext1">afterwards().</code></span></p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❹ </span>  Pass the <span><code class="codeintext1">afterwards()</code></span> function as the callback.</p>

    <p class="body">We first declare an immediately invoked function expression (IIFE).</p>

    <div class="sgc3">
      <p class="sidebarc">An IIFE is a function that is both declared and executed at the same time.</p>
    </div>

    <p class="body">This function will check for the authenticated state of the user-agent and execute the <span><code class="codeintext">User.findOne()</code></span> model method if the user-agent is authenticated. The results of those checks are passed in as arguments to the IIFE. The advantage here is that we accomplish the same result as the last option with what we feel is a much more intuitive flow.</p>

    <p class="body">What about the other responses that have views like <span><code class="codeintext">forbidden.js</code></span> and <span><code class="codeintext">serverError.js</code></span>?  These error pages should not show up in the normal course of using the application. Therefore we’ve chosen to remove the <span><code class="codeintext">layout</code></span> and the navigation partial from <span><code class="codeintext">serverError.js</code></span> and <span><code class="codeintext">forbidden.js.</code></span> We removed the layout by passing in the <span><code class="codeintext">layout</code></span> property and assigning it to <span><code class="codeintext">false</code></span> in each response of your cloned repository similar to listing 11.11.</p>

    <p class="codelistingcaption">Listing 11.11  Removing the layout in <span><code class="codeintext1">serverError.js</code></span> and <span><code class="codeintext1">forbidden.js</code></span></p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">if (options.view) {   <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">  return res.view(options.view, { data: data, layout: false });</code> <code class="codebcxspmiddle">}</code> <code class="codebcxspmiddle">...</code> <code class="codebcxspmiddle">else return res.view('403', { data: data, layout: false }, function (err, html) {  <span class="codeannotationcueballs1">❷ </span></code><code class="codebcxsplast">...</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶ </span>  Ifthe a view is passed as an argument add a <span><code class="codeintext1">layout</code></span> property in locals set to <span><code class="codeintext1">false.</code></span></p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❷ </span>  If the default view is rendered add a <span><code class="codeintext1">layout</code></span> property in locals set to <span><code class="codeintext1">false.</code></span></p>

    <p class="body">Let’s move on to the Tutorial and Video views in the next section.</p>

    <h2 class="head" id="heading_id_12">11.3   Adjusting access control rules</h2>

    <p class="body">By far the views associated with the tutorial and videos views are the largest additions to Brushfire functionality. Recall that users want the ability to aggregate YouTube videos into a collection called Tutorials. They want to be able to rate the tutorials and chat with other users who happen to be watching a particular tutorial or post chat messages. Based upon these requirements, we created wireframes that encompass  the functionality for each view including:</p>

    <p class="listbulletcxspfirst">·   <span><code class="codeintext">tutorials-detail.ejs</code></span> – used as the main page for a tutorial</p>

    <p class="listbulletcxspmiddle">·   <span><code class="codeintext">tutorials-detail-new.ejs</code></span>– used when creating a new tutorial</p>

    <p class="listbulletcxspmiddle">·   <span><code class="codeintext">tutorials-detail-edit.ejs</code></span>– used when editing an existing tutorial</p>

    <p class="listbulletcxspmiddle">·   <span><code class="codeintext">show-video.ejs</code></span>– used when viewing a video</p>

    <p class="listbulletcxspmiddle">·   <span><code class="codeintext">tutorials-detail-video-new.ejs</code></span>– used when creating a new video</p>

    <p class="listbulletcxsplast">·   <span><code class="codeintext">tutorials-detail-video-edit.ejs</code></span>– used when editing an existing video</p>

    <p class="body">In addition to the wireframes, we have documented the requirements for each request in the API reference.</p>

    <h3 class="head1" id="heading_id_13">11.3.1   Customizing a view based on edit permissions</h3>

    <p class="body">The tutorials detail page has three different wireframe states depending upon the user agent’s condition:</p>

    <p class="listbulletcxspfirst">·   Unauthenticated user agent,</p>

    <p class="listbulletcxspmiddle">·   Authenticated user agent and <span class="underline">not</span> the owner of the tutorial, and</p>

    <p class="listbulletcxsplast">·   Authenticated user agent and the owner of the tutorial.</p>

    <p class="body">Figure 11.16 shows the model and attributes for each state of the view.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/11_16.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 11.16  The model and attribute for each view is shown if it’s not duplicated in the <span class="codeannotationcueballs">② </span>  user-agent authenticated and tutorial owner view. Therefore, all of the attributes in <span class="codeannotationcueballs">① </span>  the unauthenticated view are referenced in <span class="codeannotationcueballs">② </span> . Notice that some of the attributes use the term calc for “calculated value”. The value is not stored as displayed but instead calculated in an action.</p>

    <p class="body">Next, let’s look at the requests for each state of the view in figure 11.17.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/11_17.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 11.17  All of the requests for each view are shown based upon the state of the user agent.</p>

    <p class="body">To control the contents of the view based upon the user agent’s state, we will employ a combination of the <span><code class="codeintext">me</code></span> dictionary we’ve been using and a new <span><code class="codeintext">me.isMe</code></span> property that if <span><code class="codeintext">true</code></span> indicates that the user agent is authenticated as the creator of the tutorial.  When a user agent is not authenticated, <span class="codeannotationcueballs">① </span>  a read-only view of the tutorial detail page is displayed as shown in figure 11.17. In this state, the page contains two requests. One request links the tutorial back to its owner and the other request loads a video record into the video player page. When a user agent is authenticated but not the owner of the tutorial, a read-only version of the page is again displayed but with an added <span class="italics">myRating</span> request similar to figure 11.18.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/11_18.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 11.18   This tutorial was created by the user <span class="italics1">sailsinaction</span>, however, it is being viewed by the user <span class="italics1">nikolatesla.</span> Therefore, <span class="italics1">nikolatesla</span> can rate and view the tutorial but not edit it.</p>

    <p class="body">Finally, when a user agent is authenticated and is the owner of the tutorial, UI elements to edit, delete, and otherwise alter the tutorial and video is displayed similar to figure 11.19.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/11_19.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 11.19 A user agent that is authenticated and the owner of the tutorial adds additional request to modify the tutorial and video. Note an owner of a tutorial cannot rate his or her own tutorial.</p>

    <p class="body">So the display of additional requests is controlled via an <span><code class="codeintext">isMe</code></span> local in the <span><code class="codeintext">tutorialDetail</code></span> action of <span><code class="codeintext">brushfire/api/controllers/PageController.js</code></span> similar to listing 11.12.</p>

    <p class="codelistingcaption">Listing 11.12  The <span><code class="codeintext1">isMe</code></span> property in the <span><code class="codeintext1">tutorialDetail</code></span> action of the page controller.</p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">if (user.username === tutorial.owner) {  <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">  me.isMe = true;</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">  return res.view('tutorials-detail', {</code> <code class="codebcxspmiddle">    me: me,</code> <code class="codebcxspmiddle">    stars: tutorial.stars,</code> <code class="codebcxspmiddle">    tutorial: tutorial</code> <code class="codebcxspmiddle">  });</code> <code class="codebcxspmiddle">}</code><code class="codebcxsplast">...</code>

    <p class="codeannotation pcalibre7"><span class="codeannotationcueballs2">❶ </span>  The <span><code class="codeintext1">isMe</code></span> property is <span><code class="codeintext1">true</code></span> if the user agent’s session <span><code class="codeintext1">username</code></span> is equal to the tutorial’s <span><code class="codeintext1">owner</code></span>.</p>

    <p class="body">If the user agent is authenticated we lookup the user by the session’s <span><code class="codeintext">userId</code></span>.  We compare the returned <span><code class="codeintext">username</code></span> property of that found user with the tutorial record’s <span><code class="codeintext">owner</code></span>. If the two properties are equal, the <span><code class="codeintext">isMe</code></span> property is set to <span><code class="codeintext">true</code></span> and passed on as a <span><code class="codeintext">local</code></span> to the <span><code class="codeintext">view</code></span>. Markup in the view is displayed depending upon the value of <span><code class="codeintext">me.isMe</code></span>. We will look at the wireframes for the other views related to the tutorial and video as we implement each feature in coming chapters. If you’re curious, you can review the requirements of all the wireframes in the API reference and see all the wireframes in the chapter 11 hub located here: <a class="pcalibre8 pcalibre5" href="http://sailsinaction.github.io/chapter-11/">http://sailsinaction.github.io/chapter-11/</a>.</p>

    <h2 class="head" id="heading_id_14">11.4   Patterns and best practices</h2>

    <p class="body">Application development is a constantly evolving process of solving problems and then editing and refining the solutions. There are certain times, however, that are better than others for refining your code. The pivot is one of those opportunities to reflect upon the current code base and make changes before embarking on new features. One of the first tasks you should consider is removing code that is no longer used in the project. For example, in chapter three we began working on the front-end as a single-page application (SPA) and later transitioned to a hybrid combination of using server-rendered views and a front-end framework like Angular. There were a lot of unused templates and code that we were able to remove. As you review the repo you’ll see that we were able to trim quite a bit of unused source code from the project. In this chapter we’ll also do some actual refactoring of our source.</p>

    <h3 class="head1" id="heading_id_15">11.4.1   Refactoring repetitive action names</h3>

    <p class="body">As your application grows, you’ll start to notice things that annoy you. One of these things is your naming choices. For example, when we started Brushfire we wanted to be descriptive in our <span class="italics">page</span> controller so we prefixed each action with the word <span class="italics">show</span> and added the word <span class="italics">Page</span> on the end (e.g. showHomepage, showProfilePage, etc.). What began as a well-intended naming structure now becomes a distraction, making the actions more difficult to read. To remedy this we removed “show” and “Page” from each action name. This of course required us to check our action name changes in explicit routes found in the <span class="italics">brushfire/config/routes.js</span> file as well as changes to action names in policies via <span class="italics">brushfire/config/policies.js</span>. As you review the new repo. You will see these and other naming enhancements to the Brushfire project.</p>

    <h3 class="head1" id="heading_id_16">11.4.2   Using folders to organize views</h3>

    <p class="body">Sometimes it makes sense to go back and aggregate views into folders for better organization. Let’s look at an example relating to the password recovery system to aggregate some views. We have decided to organize all of the views related to password recovery in a views subfolder named <span><code class="codeintext">password-recovery</code></span>. Listing 11.13 illustrates the way you reference the path to a view in <span><code class="codeintext">res.view()</code></span>.</p>

    <p class="codelistingcaption">Listing 11.13 Referencing a path to a view in Sails</p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">passwordRecoveryEmail: function(req, res) {</code> <code class="codebcxspmiddle">  return res.view('./password-recovery/password-recovery-email', {</code> <code class="codebcxspmiddle">    me: null</code> <code class="codebcxspmiddle">  });</code> <code class="codebcxspmiddle">},</code><code class="codebcxsplast">...</code>

    <p class="body">Now that you know how to access views in subfolders from <span><code class="codeintext">res.view()</code></span>we’ll leave it up to you to determine how best to organize other related views based upon your requirements in the future.</p>

    <h3 class="head1" id="heading_id_17">11.4.3   Refactoring EJS views and client-side templates</h3>

    <p class="body">We’ve settled on a hybrid approach to creating front-end views which combines EJS tags with Angular controllers and directives. But how do you know when to use either approach? As a general rule, if the current elements on a page will not change between a page refresh we use EJS. For example, in <span><code class="codeintext">brushfire/views/partials/navigation.ejs</code></span><span class="italics">,</span> none of the elements--nav links, gravatarURL, etc. change between a page refresh so we refactored using <span class="italics">if</span> statements within EJS tags instead of using Angular <span><code class="codeintext">ng-hide</code></span> and <span><code class="codeintext">ng-show</code></span> directives. If, however, an element will change between page refreshes we’ll use Angular. As you’ll see shortly, the search form on the <span class="italics">homepage</span> displays a results list before the page itself is refreshed.</p>

    <div class="sgc3">
      <p class="sidebarc">As always when we say use Angular, we mean you can use whatever front-end JavaScript framework you prefer.</p>
    </div>

    <p class="body">Another factor that influences the use of EJS tags versus Angular is search engine optimization (SEO). Generally, a page whose content is already rendered versus one that must be rendered on the front-end after the page is loaded will achieve better search engine results. Search engines are improving their ability to derive content from JavaScript; however, we’ve found that if it’s important for a page to be incorporated by a search engine, then use EJS tags and server rendered views instead.</p>

    <p class="body">Any interaction with the user that involves responding to click events will also require some form of front-end JavaScript such as Angular’s <span class="italics">ng-click</span> directive. Form validation is also made easier using a front-end JavaScript framework like Angular. The same holds true for form management in general. For example using a combination of <span class="italics">ng-submit</span> and <span class="italics">ng-model</span>, make form submission easier to accomplish than harvesting form elements manually. Finally, loading states benefit from front-end JavaScript because of the ease of configuring them.</p>

    <p class="body">The biggest consideration, however, when combining these two approaches is how you transfer back-end data to the front end. Recall that there are three ways to get back-end data to our front end in Brushfire.</p>

    <p class="listbulletcxspfirst">1. We can send locals to an EJS view and use EJS tags to render the locals on the page.</p>

    <p class="listbulletcxspmiddle">2. We can append locals to the browser’s <span><code class="codeintext">window</code></span> dictionary and make them accessible in an Angular controller via assignment to the <span><code class="codeintext">$scope</code></span> dictionary.</p>

    <p class="listbulletcxsplast">3. We can make an AJAX request to a back-end endpoint and assign the results to the Angular <span><code class="codeintext">$scope</code></span> dictionary.</p>

    <p class="body">Options 2 and/or3are necessary when the front-end framework requires access to the data between a page refresh. For example, because the navigation bar doesn’t change between a page refresh, we can simply send the <span><code class="codeintext">me</code></span> dictionary as a <span><code class="codeintext">local</code></span> to the view. This avoids the need to grab the values of <span><code class="codeintext">me</code></span> from the <span><code class="codeintext">window</code></span> dictionary into a front-end controller and then to the page via Angular. As you review the new Brushfire repo you’ll see that we incorporated all of these general principles in our decisions of when to use EJS and Angular in the project.</p>

    <h3 class="head1" id="heading_id_18">11.4.4   Using <span><code class="codeintext1">async.each()</code></span></h3>

    <p class="body">Since users are not bashful about adding videos as part of tutorials we no longer need to seed?? YouTube videos in the bootstrap. In order to do adequate testing, however, we need to create multiple test users. So we we have refactored the bootstrap to use the popular <span><code class="codeintext">async</code></span> library. Async is an npm module that provides functions for working with asynchronous JavaScript. Here we are using asynchronous methods to build up our test users. We need a way to coalesce the results of each method that won’t produce issues because we don’t know when each method will return. In Sublime open <span><code class="codeintext">brushfire/config/bootstrap.js</code></span> to see the changes similar to listing 11.14.</p>

    <p class="codelistingcaption">Listing 11.14 Refactoring the bootstrap.js file</p><code class="codebcxspfirst">module.exports.bootstrap = function(cb) {  <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">  var async = require('async');</code> <code class="codebcxspmiddle">  var Passwords = require('machinepack-passwords');</code> <code class="codebcxspmiddle">  var Gravatar = require('machinepack-gravatar');</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">  var TEST_USERS = [{</code> <code class="codebcxspmiddle">    email: 'sailsinaction@gmail.com',</code> <code class="codebcxspmiddle">    username: 'sails-in-action',</code> <code class="codebcxspmiddle">    password: 'abc123',</code> <code class="codebcxspmiddle">    admin: true</code> <code class="codebcxspmiddle">  },</code> <code class="codebcxspmiddle">  ...</code> <code class="codebcxspmiddle">  }];</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">  async.each(TEST_USERS, function findOrCreateEachFakeUser(fakeUser, next){  <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    User.findOne({</code> <code class="codebcxspmiddle">      email: fakeUser.email</code> <code class="codebcxspmiddle">    }).exec(function (err, existingUser){</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      if (err) return next(err);</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      if (existingUser) {</code> <code class="codebcxspmiddle">        return next();</code> <code class="codebcxspmiddle">      }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      Passwords.encryptPassword({</code> <code class="codebcxspmiddle">        password: fakeUser.password,</code> <code class="codebcxspmiddle">      }).exec({</code> <code class="codebcxspmiddle">        error: function(err) {</code> <code class="codebcxspmiddle">          return next(err);</code> <code class="codebcxspmiddle">        },</code> <code class="codebcxspmiddle">        success: function(encryptedPassword) {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">          var gravatarURL;</code> <code class="codebcxspmiddle">          try {</code> <code class="codebcxspmiddle">            gravatarURL = Gravatar.getImageUrl({</code> <code class="codebcxspmiddle">              emailAddress: fakeUser.email</code> <code class="codebcxspmiddle">            }).execSync();</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">          } catch (err) {</code> <code class="codebcxspmiddle">            return next(err);</code> <code class="codebcxspmiddle">          }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">          User.create({</code> <code class="codebcxspmiddle">            gravatarURL: gravatarURL,</code> <code class="codebcxspmiddle">            encryptedPassword: encryptedPassword,</code> <code class="codebcxspmiddle">            email: fakeUser.email,</code> <code class="codebcxspmiddle">            username: fakeUser.username,</code> <code class="codebcxspmiddle">            deleted: false,</code> <code class="codebcxspmiddle">            admin: fakeUser.admin,</code> <code class="codebcxspmiddle">            banned: false,</code> <code class="codebcxspmiddle">          }).exec(function(err, createdUser) {</code> <code class="codebcxspmiddle">            if (err) {</code> <code class="codebcxspmiddle">              return next(err);</code> <code class="codebcxspmiddle">            }</code> <code class="codebcxspmiddle">            return next();</code> <code class="codebcxspmiddle">          }); //&lt;/User.create()&gt;</code> <code class="codebcxspmiddle">        }</code> <code class="codebcxspmiddle">      }); //&lt;/Passwords.encryptPassword&gt;</code> <code class="codebcxspmiddle">    }); // &lt;/ User.find</code> <code class="codebcxspmiddle">  }, function afterwards(err){  <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle">    if (err) {</code> <code class="codebcxspmiddle">      return cb(err);</code> <code class="codebcxspmiddle">    }</code> <code class="codebcxspmiddle">    return cb();</code> <code class="codebcxspmiddle">  });</code><code class="codebcxsplast">};</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶ </span>  <span><code class="codeintext1">cb</code></span> is a way we can tell Sails we’re done with the bootstrap and it can continue lifting.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❷ </span>  <span><code class="codeinitalic1">next</code></span> is a way we can tell <span><code class="codeintext1">async.each()</code></span> we’re done with an iteration.</p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❸ </span>  <span><code class="codeintext1">Afterwards</code></span> will either call <span><code class="codeintext1">cb(err)</code></span> if there’s an error or <span><code class="codeintext1">cb()</code></span>if the iterations were successful</p>

    <p class="body"><span><code class="codeintext">Async.each()</code></span> provides a callback named <span><code class="codeintext">next</code></span> as an added argument to the iterator. This provides a way for us to tell <span><code class="codeintext">async</code></span> when we’re done with each iteration. After all iterations have been successfully completed or we get an error, the <span><code class="codeintext">afterwards</code></span> method is executed either returning bootstrap’s <span><code class="codeintext">cb</code></span><span class="italics">, callback</span>, with an error or simply <span><code class="codeintext">cb</code></span> if the iterations were successful. It’s important to distinguish the bootstrap <span><code class="codeintext">cb</code></span> with <span class="italics">async’s</span> <span><code class="codeintext">next</code></span> callback. You can think of both callbacks as a way of telling either <span><code class="codeintext">async</code></span> or the bootstrap when we are finished. Therefore, we wouldn’t use <span><code class="codeintext">cb</code></span> within the <span><code class="codeintext">async.each()</code></span>method because that’s a different scope and time than the bootstrap method. We can name the callback methods whatever we want. By convention we’re using <span><code class="codeintext">cb()</code></span> for the bootstrap file and <span><code class="codeintext">next()</code></span> for <span><code class="codeintext">Async.each()</code></span>.</p>

    <h3 class="head1" id="heading_id_19">11.4.5   Adding new features</h3>

    <p class="body">Based upon user feedback, Chad asked us to implement ratings on tutorials. He said, “Let users rate tutorials up to 5 stars.”This seems like a pretty innocuous request. However, when you don’t lock down what “ratings” really means, you can quickly get in a quagmire:</p>

    <p class="listbulletcxspfirst">·   Can a user rate a tutorial when unauthenticated?</p>

    <p class="listbulletcxspmiddle">·   Can an owner of a tutorial rate his or her own tutorial? </p>

    <p class="listbulletcxspmiddle">·   What does the UI do, if anything, to let a user who has already rated this tutorial know that they've already rated it?</p>

    <p class="listbulletcxspmiddle">·   What does the UI do, if anything, to let a user who has  already rated this tutorial know that, after choosing a new rating, they've updated their previous rating?</p>

    <p class="listbulletcxsplast">·   How do you differentiate in the UI an average of many users ratings and a particular users rating?</p>

    <p class="body">As you can see there is a bit more involved with defining the requirements of the rating feature. After some additional discussions, Chad agreed on the following more specific requirements:</p>

    <p class="listbulletcxspfirst">·   There will be two ratings – an overall rating and a myRating. Whether a particular view displays one or both of the ratings will depend upon the requirements of that view.</p>

    <p class="listbulletcxspmiddle">·   A user-agent must be authenticated in order to rate a tutorial. Therefore, myRating will not be displayed if the user-agent isn’t authenticated.</p>

    <p class="listbulletcxspmiddle">·   A user-agent can change their vote at will.</p>

    <p class="listbulletcxsplast">·   When a user-agent has not yet rated a tutorial, the myRating will have empty stars. When a user-agent successfully rates a tutorial a toastr message will be displayed.</p>

    <p class="body">Our point here is to never underestimate the need to fully document a feature because even a seemingly simple one can quickly become complex.</p>

    <h2 class="head" id="heading_id_20">11.5   In Depth: Adding a password recovery flow</h2>

    <p class="body">Chad has been inundated with emails from Brushfire users who forgot their passwords. To address this we’ll create a password recovery flow into Brushfire. This will allow a user to reset their passwords.</p>

    <h3 class="head1" id="heading_id_21">11.5.1   Understanding how password recovery works</h3>

    <p class="body">A typical password recovery system allows the user to request a password reset in the event they can’t remember their existing password. The system sends an email to the address used when signing up for an account. We will use a popular service called Mailgun that allows us to send email programmatically. A reset link is then attached to the email that provides a one-time use token to reset the password. Figure 11.20 illustrates the flow of the recovery system.</p>

    <p class="figurea"><img alt="" class="pcalibre" src="../Images/11_20.png"/><br class="calibre1"/></p>

    <p class="figureacaption">Figure 11.20 A password recovery system has several components including <span class="codeannotationcueballs">① </span>  a form that captures the email address used when creating the account, <span class="codeannotationcueballs">② </span>  an action that generates a one-time token and the <span class="codeannotationcueballs">④ </span>  email and <span class="codeannotationcueballs">③ </span>  responds with an email sent form, and the <span class="codeannotationcueballs">⑤ </span>  password reset form with the <span class="codeannotationcueballs">⑥ </span>  reset password action.</p>

    <p class="body">The password recovery system starts with a <span><code class="codeintext">GET</code></span> request to <span><code class="codeintext">/password-recovery-email</code></span> from the <span><code class="codeintext">sign-in</code></span> page. This triggers the <span><code class="codeintext">passwordRecoveryEmail</code></span> action of the <span><code class="codeintext">page</code></span> controller that we setup in the repo you cloned at the beginning of the chapter in listing 11.15.</p>

    <p class="codelistingcaption">Listing 11.15  The <span><code class="codeintext1">passwordRecoveryEmail</code></span> action</p><code class="codebcxspfirst">  passwordRecoveryEmail: function(req, res) {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    return res.view('./password-recovery/password-recovery-email', {</code> <code class="codebcxspmiddle">      me: null</code> <code class="codebcxspmiddle">    });</code><code class="codebcxsplast">  },</code>

    <p class="body">The user supplies the <span class="italics">email address</span> they provided when originally signing up for Brushfire. Clicking the <span class="italics">Send password recovery email</span> button triggers the <span><code class="codeintext">generateRecoveryEmail</code></span> action of the <span class="italics">user controller</span> similar to listing 11.16.</p>

    <p class="codelistingcaption">Listing 11.16  The <span><code class="codeintext1">generateRecoveryEmail</code></span> action</p><code class="codebcxspfirst">  generateRecoveryEmail: function(req, res) {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    if (_.isUndefined(req.param('email'))) {</code> <code class="codebcxspmiddle">      return res.badRequest('An email address is required!');</code> <code class="codebcxspmiddle">    }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    User.findOne({          <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">      email: req.param('email')</code> <code class="codebcxspmiddle">    }).exec(function foundUser(err, user) {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      if (!user) return res.notFound();</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      try {</code> <code class="codebcxspmiddle">        var randomString = Strings.random({}).execSync();    <span class="codeannotationcueballs1">❷ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      } catch (err) {</code> <code class="codebcxspmiddle">        return res.serverError(err);</code> <code class="codebcxspmiddle">      }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">      User.update({</code> <code class="codebcxspmiddle">        id: user.id</code> <code class="codebcxspmiddle">      }, {</code> <code class="codebcxspmiddle">        passwordRecoveryToken: randomString    <span class="codeannotationcueballs1">❸ </span></code> <code class="codebcxspmiddle">      }).exec(function updateUser(err, updatedUser) {</code> <code class="codebcxspmiddle">        if (err) return res.negotiate(err);</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">        var recoverUrl = sails.config.mailgun.baseUrl + '/password-reset-form/' + updatedUser[0].passwordRecoveryToken; <span class="codeannotationcueballs1">❹ </span></code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">        var messageTemplate = 'Losing your password is a drag, but don\'t worry! \n' + <span class="codeannotationcueballs1">❺ </span></code> <code class="codebcxspmiddle">                   '\n' +</code> <code class="codebcxspmiddle">                   'You can use the following link to reset your password: \n' +</code> <code class="codebcxspmiddle">                   recoverUrl + '\n' +</code> <code class="codebcxspmiddle">                   '\n' +</code> <code class="codebcxspmiddle">                   'Thanks, Chad';</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">        Mailgun.sendPlaintextEmail({     <span class="codeannotationcueballs1">❻ </span></code> <code class="codebcxspmiddle">          apiKey: sails.config.mailgun.apiKey,</code> <code class="codebcxspmiddle">          domain: sails.config.mailgun.domain,</code> <code class="codebcxspmiddle">          toEmail: updatedUser[0].email,</code> <code class="codebcxspmiddle">          subject: '[Brushfire] Please reset your password',</code> <code class="codebcxspmiddle">          message: messageTemplate,</code> <code class="codebcxspmiddle">          fromEmail: 'sailsinaction@gmail.com',</code> <code class="codebcxspmiddle">          fromName: 'Chad McMarketing',</code> <code class="codebcxspmiddle">        }).exec({</code> <code class="codebcxspmiddle">          error: function(err) {</code> <code class="codebcxspmiddle">            return res.negotiate(err);</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">          },</code> <code class="codebcxspmiddle">          success:  function() {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">            return res.ok();</code> <code class="codebcxspmiddle">          },</code> <code class="codebcxspmiddle">        });</code> <code class="codebcxspmiddle">      });</code> <code class="codebcxspmiddle">    });</code><code class="codebcxsplast">  },</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶ </span> : Find the <span><code class="codeintext1">user</code></span> via the provided <span><code class="codeintext1">email</code></span> parameter.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❷ </span> : Generate a random alphanumeric string using <span><code class="codeintext1">machinepack-stringsrandom</code></span> machine.</p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❸ </span> : Update the <span><code class="codeintext1">user</code></span> record’s <span><code class="codeintext1">passwordRecoveryToken.</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❹ </span> : Generate the <span><code class="codeintext1">Url</code></span> to be inserted in the <span><code class="codeintext1">email.</code></span></p>

    <p class="codeannotationcxspmiddle"><span class="codeannotationcueballs2">❺ </span> : Create the email template.</p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❻ </span> : Send the email template using the <span><code class="codeintext1">machinepack-mailgun.</code></span></p>

    <p class="body">We’ve already reviewed most of the mechanics of how this action works in previous chapters. There are a few new details. For example, we are using two new machines; one to generate a random string-- <span><code class="codeintext">machinepack-strings</code></span> and one to send email-- <span><code class="codeintext">machinepack-mailgun.sendPlainTextEmail</code></span>.</p>

    <p class="body">The Mail gun service requires an <span class="italics">API key</span> and <span class="italics">domain</span> which we’ll obtain and configure  in <span><code class="codeintext">brushfire/config/local.js</code></span> in the next section. For now, know that the <span><code class="codeintext">local.js</code></span> file places the properties on a global <span class="italics">Sails</span> dictionary that we’re accessing in this action. The result of the <span><code class="codeintext">generateRecoveryEmail</code></span> action is that an email is sent to the user’s email address with a link that (when clicked) makes a <span><code class="codeintext">GET</code></span> request to <span><code class="codeintext">/password-reset-form/:passwordRecoveryToken</code></span>, passing the <span><code class="codeintext">passwordRecoveryToken</code></span> as a parameter. The front-end <span><code class="codeintext">passwordRecoveryPageController</code></span> redirects the user-agent to a <span class="italics">password recovery email sent page</span> via a <span><code class="codeintext">GET</code></span> request to <span><code class="codeintext">/password-recovery-email-sent</code></span>. When the user clicks the link in the email message, a <span><code class="codeintext">GET</code></span> request to <span><code class="codeintext">/password-reset-form/:passwordRecoveryToken</code></span> is made that triggers the <span><code class="codeintext">passwordReset</code></span> action of the <span><code class="codeintext">Page</code></span> controller which renders the <span><code class="codeintext">password-reset</code></span> view. This view contains a form for the user to provide a new password. When the user clicks the <span class="italics">reset password</span> button, a <span><code class="codeintext">PUT</code></span> request to <span><code class="codeintext">/user/reset-password</code></span> is made which triggers the <span><code class="codeintext">resetPassword</code></span> action of the <span><code class="codeintext">User</code></span> controller similar to listing 11.17.</p>

    <p class="codelistingcaption">Listing 11.17  The resetPassword action</p><code class="codebcxspfirst">  resetPassword: function(req, res) {</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">    if (!_.isString(req.param('passwordRecoveryToken'))) {    <span class="codeannotationcueballs1">❶ </span></code> <code class="codebcxspmiddle">      return res.badRequest('A password recovery token is required!');</code> <code class="codebcxspmiddle">    }</code> <code class="codebcxspmiddle">...</code> <code class="codebcxspmiddle">        success: function(encryptedPassword) {</code> <code class="codebcxspmiddle">          User.update(user.id, {</code> <code class="codebcxspmiddle">            encryptedPassword: encryptedPassword,</code> <code class="codebcxspmiddle">            passwordRecoveryToken: null</code> <code class="codebcxspmiddle">          }).exec(function (err, updatedUsers) {</code> <code class="codebcxspmiddle">            if (err) {</code> <code class="codebcxspmiddle">              return res.negotiate(err);</code> <code class="codebcxspmiddle">            }</code> <code class="codebcxspmiddle"> </code> <code class="codebcxspmiddle">            req.session.userId = updatedUsers[0].id;  <span class="codeannotationcueballs1">❷ </span></code><code class="codebcxsplast">...</code>

    <p class="codeannotationcxspfirst"><span class="codeannotationcueballs2">❶ </span> Using <span><code class="codeintext1">__.isString()</code></span> checks for a value and if that value is a strin.g</p>

    <p class="codeannotationcxsplast"><span class="codeannotationcueballs2">❷ </span> Remember that <span><code class="codeintext1">User.update()</code></span>returns an array.</p>

    <p class="body">The functionality in this action should also look familiar from previous chapters. We’re using <span><code class="codeintext">_.isString()</code></span> for secondary validation instead of <span><code class="codeintext">_.isDefined()</code></span><span class="italics">.</span>This gives us the advantage of checking for both a value as well as whether that value is a string in one method. Also recall that the <span><code class="codeintext">User.update()</code></span>method of the model returns an <span class="underline">array</span> of dictionaries and not a single dictionary. If everything is successful, the front-end redirects the user-agent to the profile page via a <span><code class="codeintext">GET</code></span>request to <span><code class="codeintext">/:username</code></span>.</p>

    <h3 class="head1" id="heading_id_22">11.5.2   Sending emails</h3>

    <p class="body">Mailgun is a commercial service that provides APIs that allow you to send email programmatically. In order to use the service, we need credentials and in this section we’ll show you how to store and incorporate your credentials using the <span><code class="codeintext">local.js</code></span> file. You are not limited to using Mailgun for sending emails. Create a free account by navigating your browser to <a class="pcalibre8 pcalibre5" href="http://mailgun.com">http://mailgun.com</a>. You’ll want to select the free account that allows for up to 10,000 emails per month. Once you’ve created your account you’ll need to collect two values -- your Domain and your API Key. In Sublime open <span><code class="codeintext">brushfire/config/local.js</code></span> and add the following code with your credentials in listing 11.18.</p>

    <p class="codelistingcaption">Listing 11.18  Adding mailgun credentials to <span><code class="codeintext1">local.js</code></span></p><code class="codebcxspfirst">...</code> <code class="codebcxspmiddle">module.exports.mailgun =  {</code> <code class="codebcxspmiddle">  apiKey: 'ADD YOUR API KEY',</code> <code class="codebcxspmiddle">  domain: 'ADD YOUR DOMAIN',</code> <code class="codebcxspmiddle">  baseUrl: 'http://localhost:1337'</code> <code class="codebcxspmiddle">};</code><code class="codebcxsplast">...</code>

    <p class="body">Your password recovery system is now ready to start sending emails and resetting passwords.</p>

    <h2 class="head" id="heading_id_23">11.6   Summary</h2>

    <p class="listbulletcxspfirst">·   Proper attention to detail on front-end mockups, requirements and decision making should limit pivots to those based upon market feedback.</p>

    <p class="listbulletcxspmiddle">·   Refactoring is a process where existing code is restructured to increase organization, readability and an overall reduction in complexity.</p>

    <p class="listbulletcxspmiddle">·   Using variables in custom routes requires added emphasis on the route’s order in <span><code class="codeintext">brushfire/config/routes.js</code></span>.</p>

    <p class="listbulletcxsplast">·   3<span class="superscript">rd</span> party services like Mailgun can send emails on Sails behalf to fulfill an essential component of a password recovery system.</p>
  </div>
</body>
</html>
